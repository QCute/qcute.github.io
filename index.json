[{"categories":["shell"],"contents":"今天发现php的getenv函数返回false\ngetenv(\u0026#39;HOME\u0026#39;) 由于是系统是运行在system daemon下的, 查看了service unit, 里面并无指定具体的user\n所以, 在Service里面添加User\n[Service] # specific user User=root 函数就可以正确获取到数据了\n","date":"2020.03.10","permalink":"https://qcute.github.io/posts/shell/service-unit-user/","summy":"今天发现php的getenv函数返回false getenv(\u0026#39;HOME\u0026#39;) 由于是系统是运行在system daemon下的, 查看了service unit, 里面并无指定具体的user 所以, 在Service里面添加User [Service] # specific user User=root 函数就可","tags":null,"title":"Service Unit User问题"},{"categories":["shell"],"contents":"问题 在一次写脚本时，偶然发现了当Escript在Bash的while中使用时，循环里明明有很多次，但是Escript却只执行了一次的问题。\nEscript执行脚本test.erl时，启动命令如下\ntest.erl -B -- -root /usr/lib/erlang -progname erl -- -home /home/m -- -boot no_dot_erlang -noshell -run escript start -extra test.erl 命令里有-noshell标识，此时erlang不会启动shell\n原因就是在Escript模式下，Erlang不会启动shell，但是仍然会从stdin中读取输入，而while读取下一次内容时就会向stdin输入内容，而内容则被Erlang读取了，循环也就“结束”了。\n解决办法就是在命令行加上 \u0026lt; /dev/null 使stdin重定向到null上，也就是禁用stdin\nescript test.erl \u0026lt; /dev/null 或者在脚本文件的shebang行上加上-noinput标识，来禁用输入\n%%! -noinput 思考 此问题类似于在while循环中使用ssh、scp或者sshpass等会使用到stdin的命令的时候，需要加上 \u0026lt; /dev/null，不然循环只会执行一次。\n参考 -noshell标识 Ensures that the Erlang runtime system never tries to read any input. Implies -noshell.\n-noinput标识 Starts an Erlang runtime system with no shell. This flag makes it possible to have the Erlang runtime system as a component in a series of Unix pipes.\n","date":"2020.03.10","permalink":"https://qcute.github.io/posts/shell/while-escript/","summy":"问题 在一次写脚本时，偶然发现了当Escript在Bash的while中使用时，循环里明明有很多次，但是Escript却只执行了一次的问题。 Escript执行脚本test.erl时，启动命令如下 test.erl -B -- -root","tags":null,"title":"记一次bash的while循环中使用escript的问题"},{"categories":["shell"],"contents":"1. 安装prometheus/grafana/alertmanager # rpm repo # https://github.com/lest/prometheus-rpm cat \u0026gt; /etc/yum.repos.d/prometheus.repo \u0026lt;\u0026lt; EOF [prometheus] name=prometheus baseurl=https://packagecloud.io/prometheus-rpm/release/el/\\$releasever/\\$basearch repo_gpgcheck=1 enabled=1 gpgkey=https://packagecloud.io/prometheus-rpm/release/gpgkey https://raw.githubusercontent.com/lest/prometheus-rpm/master/RPM-GPG-KEY-prometheus-rpm gpgcheck=1 metadata_expire=300 EOF # update cache dnf makecache # grafana dnf install grafana -y systemctl start grafana # prometheus dnf install prometheus -y # exporter cat \u0026gt;\u0026gt; /etc/prometheus/prometheus.yml \u0026lt;\u0026lt; EOF - job_name: \u0026#34;node_exporter\u0026#34; static_configs: - targets: [\u0026#34;localhost:9100\u0026#34;] - job_name: \u0026#34;mysqld_exporter\u0026#34; static_configs: - targets: [\u0026#34;localhost:9104\u0026#34;] - job_name: \u0026#34;process_exporter\u0026#34; static_configs: - targets: [\u0026#34;localhost:9256\u0026#34;] EOF systemctl start prometheus # alert manager dnf install alertmanager -y systemctl start alertmanager 2. 安装node_exporter/mysqld_exporter/process_exporter ## node expoeter ## dnf install node_exporter -y # start systemctl start node_exporter ## mysql exporter ## dnf install mysqld_exporter -y # mysql ini config echo -n \u0026#39;MYSQLD_EXPORTER_OPTS=\u0026#34;--config.my-cnf=/etc/prometheus/mysqld_exporter.ini\u0026#34;\u0026#39; \u0026gt; /etc/default/mysqld_exporter # mysql init config file cat \u0026gt; /etc/prometheus/mysqld_exporter.ini \u0026lt;\u0026lt; EOF [client] host=localhost socket=/var/lib/mysql/mysql.sock port=3306 user=root password=root EOF # start systemctl start mysqld_exporter ## process exporter ## dnf install process_exporter -y systemctl start process_exporter ","date":"2020.03.10","permalink":"https://qcute.github.io/posts/shell/prometheus/","summy":"1. 安装prometheus/grafana/alertmanager # rpm repo # https://github.com/lest/prometheus-rpm cat \u0026gt; /etc/yum.repos.d/prometheus.repo \u0026lt;\u0026lt; EOF [prometheus] name=prometheus baseurl=https://packagecloud.io/prometheus-rpm/release/el/\\$releasever/\\$basearch repo_gpgcheck=1 enabled=1 gpgkey=https://packagecloud.io/prometheus-rpm/release/gpgkey https://raw.githubusercontent.com/lest/prometheus-rpm/master/RPM-GPG-KEY-prometheus-rpm gpgcheck=1 metadata_expire=300 EOF # update cache dnf makecache # grafana dnf install grafana -y systemctl start grafana # prometheus dnf install prometheus -y # exporter cat \u0026gt;\u0026gt; /etc/prometheus/prometheus.yml \u0026lt;\u0026lt; EOF - job_name: \u0026#34;node_exporter\u0026#34; static_configs: - targets: [\u0026#34;localhost:9100\u0026#34;] - job_name: \u0026#34;mysqld_exporter\u0026#34; static_configs: - targets: [\u0026#34;localhost:9104\u0026#34;] - job_name: \u0026#34;process_exporter\u0026#34; static_configs: -","tags":null,"title":"使用RPM仓库安装Prometheus"},{"categories":["shell"],"contents":"#!/usr/bin/env bash # sshpass - use command line password with ssh # inspire by https://github.com/huan/sshpass.sh # ref to https://www.exratione.com/2014/08/bash-script-ssh-automation-without-a-password-prompt/ # the origin sshpass pass passphrase by pipe, but Symfony Process pipe need --enable-sigchild # examples: # sshpass \u0026lt;ssh or key passphrase\u0026gt; ssh \u0026lt;ssh options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; scp \u0026lt;scp options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; rsync \u0026lt;rsync options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; git \u0026lt;git options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; svn \u0026lt;svn options\u0026gt; if [[ -n \u0026#34;${SSH_ASKPASS_PASSWORD}\u0026#34; ]];then cat \u0026lt;\u0026lt;\u0026lt; \u0026#34;${SSH_ASKPASS_PASSWORD}\u0026#34; else export SSH_ASKPASS=\u0026#34;$0\u0026#34; export SSH_ASKPASS_PASSWORD=\u0026#34;$1\u0026#34; export DISPLAY=:0 shift setsid \u0026#34;$@\u0026#34; \u0026lt;/dev/null fi 使用\nsshpass your_passphrase ssh name@host \u0026#34;echo hello world\u0026#34; 适用于SSH/SCP/RSync/Git/SVN等使用SSH的命令\n","date":"2020.03.10","permalink":"https://qcute.github.io/posts/shell/ssh-pass/","summy":"#!/usr/bin/env bash # sshpass - use command line password with ssh # inspire by https://github.com/huan/sshpass.sh # ref to https://www.exratione.com/2014/08/bash-script-ssh-automation-without-a-password-prompt/ # the origin sshpass pass passphrase by pipe, but Symfony Process pipe need --enable-sigchild # examples: # sshpass \u0026lt;ssh or key passphrase\u0026gt; ssh \u0026lt;ssh options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; scp \u0026lt;scp options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; rsync \u0026lt;rsync options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; git \u0026lt;git options\u0026gt; # sshpass \u0026lt;ssh or key passphrase\u0026gt; svn \u0026lt;svn options\u0026gt; if [[ -n \u0026#34;${SSH_ASKPASS_PASSWORD}\u0026#34; ]];then cat \u0026lt;\u0026lt;\u0026lt; \u0026#34;${SSH_ASKPASS_PASSWORD}\u0026#34; else export SSH_ASKPASS=\u0026#34;$0\u0026#34; export SSH_ASKPASS_PASSWORD=\u0026#34;$1\u0026#34; export DISPLAY=:0 shift setsid \u0026#34;$@\u0026#34; \u0026lt;/dev/null fi","tags":null,"title":"一个简单的SSH Pass脚本"},{"categories":["shell"],"contents":"1. 使用fifo和nc # client -\u0026gt; proxy:8974 -\u0026gt; server:8998 rm -f /tmp/fifo \u0026amp;\u0026amp; mkfifo /tmp/fifo \u0026amp;\u0026amp; nc -lkp 8974 \u0026lt; /tmp/fifo | nc -lkp 8998 \u0026gt; /tmp/fifo 2. 使用socat # client -\u0026gt; proxy:8974 -\u0026gt; server:8998 socat TCP4-LISTEN:8974,reuseaddr,fork TCP4:127.0.0.1:8998 ","date":"2020.03.10","permalink":"https://qcute.github.io/posts/shell/proxy/","summy":"1. 使用fifo和nc # client -\u0026gt; proxy:8974 -\u0026gt; server:8998 rm -f /tmp/fifo \u0026amp;\u0026amp; mkfifo /tmp/fifo \u0026amp;\u0026amp; nc -lkp 8974 \u0026lt; /tmp/fifo | nc -lkp 8998 \u0026gt; /tmp/fifo 2. 使用socat # client -\u0026gt; proxy:8974 -\u0026gt; server:8998 socat TCP4-LISTEN:8974,reuseaddr,fork TCP4:127.0.0.1:8998","tags":null,"title":"一个简单的双向代理"},{"categories":["php"],"contents":"解决LaravelAdmin在Laravel 8及以上, 使用页面消息出现两次的问题\n把\nsession()-\u0026gt;flash($type, $message); 改成\nsession()-\u0026gt;now($type, $message); 即可\n影响的函数\nadmin_success admin_error admin_warning admin_info admin_toastr 但是, 在数据表单, handle函数里面使用, 以上函数会失效\n所以, 要么改, 然后在数据表单里使用session()-\u0026gt;flash\n要么不改, 然后在正常表单里使用session()-\u0026gt;now\n","date":"2020.03.09","permalink":"https://qcute.github.io/posts/php/laravel-admin-session-flash-to-now/","summy":"解决LaravelAdmin在Laravel 8及以上, 使用页面消息出现两次的问题 把 session()-\u0026gt;flash($type, $message); 改成 session()-\u0026gt;now($type, $message); 即可 影响的函数 admin_success admin_error admin_warning admin_info admin_toastr 但是, 在数据表单, handle函数里面使用, 以上函数会失效 所以, 要么改, 然后在数据","tags":null,"title":"LaravelAdmin在Laravel8以上页面消息出现两次的问题"},{"categories":["php"],"contents":"记一次Laravel Octane(Swoole)在PHP8开启jit造成的core dump的问题\n原jit配置\nopcache.jit=1255 改成\nopcache.jit=1205 即可\n","date":"2020.03.09","permalink":"https://qcute.github.io/posts/php/php-jit-core-dump/","summy":"记一次Laravel Octane(Swoole)在PHP8开启jit造成的core dump的问题 原jit配置 opcache.jit=1255 改成 opcache.jit=1205 即可","tags":null,"title":"PHP JIT Core Dump问题"},{"categories":["rust"],"contents":"1. async/await 异步函数\nasync fn f0() -\u0026gt; u32 { let f1 = f1().await; let f2 = f2().await; f1 + f2 } async fn f1() -\u0026gt; u32 { 1 } async fn f2() -\u0026gt; u32 { 2 } 生成的HIR\nPlayground左上角点HIR\nasync fn f0() -\u0026gt; /*impl Trait*/ #[lang = \u0026#34;from_generator\u0026#34;](move |mut _task_context| {{ let _t = { let f1 = match #[lang = \u0026#34;into_future\u0026#34;](f1()) { mut __awaitee =\u0026gt; loop { match unsafe { #[lang = \u0026#34;poll\u0026#34;](#[lang = \u0026#34;new_unchecked\u0026#34;](\u0026amp;mut __awaitee), #[lang = \u0026#34;get_context\u0026#34;](_task_context)) } { #[lang = \u0026#34;Ready\u0026#34;] { 0: result } =\u0026gt; break result, #[lang = \u0026#34;Pending\u0026#34;] {} =\u0026gt; { } } _task_context = (yield ()); }, }; let f2 = match #[lang = \u0026#34;into_future\u0026#34;](f2()) { mut __awaitee =\u0026gt; loop { match unsafe { #[lang = \u0026#34;poll\u0026#34;](#[lang = \u0026#34;new_unchecked\u0026#34;](\u0026amp;mut __awaitee), #[lang = \u0026#34;get_context\u0026#34;](_task_context)) } { #[lang = \u0026#34;Ready\u0026#34;] { 0: result } =\u0026gt; break result, #[lang = \u0026#34;Pending\u0026#34;] {} =\u0026gt; { } } _task_context = (yield ()); }, }; f1 + f2 }; _t }}) async fn f1() -\u0026gt; /*impl Trait*/ #[lang = \u0026#34;from_generator\u0026#34;](move |mut _task_context| { { let _t = { 1 }; _t } }) async fn f2() -\u0026gt; /*impl Trait*/ #[lang = \u0026#34;from_generator\u0026#34;](move |mut _task_context| { { let _t = { 2 }; _t } }) 翻译一下\nasync fn f0() -\u0026gt; impl Future { std::future::from_generator(move |mut _task_context| { let f1 = match std::future::IntoFuture::into_future(f1()) { mut __awaitee =\u0026gt; loop { match unsafe { std::future::Future::poll(std::pin::Pin::new_unchecked(\u0026amp;mut __awaitee), std::future::get_context(_task_context)) } { std::task::Poll::Ready(result) =\u0026gt; break result, std::task::Poll::Pending =\u0026gt; {} } _task_context = (yield ()); } }; let f2 = match std::future::IntoFuture::into_future(f2()) { mut __awaitee =\u0026gt; loop { match unsafe { std::future::Future::poll(std::pin::Pin::new_unchecked(\u0026amp;mut __awaitee), std::future::get_context(_task_context)) } { std::task::Poll::Ready(result) =\u0026gt; break result, std::task::Poll::Pending =\u0026gt; {} } _task_context = (yield ()); } } f1 + f2 }); } async fn f1() -\u0026gt; impl Future { std::future::from_generator(move |mut _task_context| { 1 }); } async fn f2() -\u0026gt; impl Future { std::future::from_generator(move |mut _task_context| { 2 }); } 可见, async函数/lambda/代码块等生成拥有Future特性的对象, await则生成yield的循环\n2. yield yield关键字会把代码重写成Generator状态机\n#![feature(generators, generator_trait)] use std::ops::{Generator, GeneratorState}; fn main() { let a: i32 = 1; let mut generator = move || { println!(\u0026#34;start\u0026#34;); yield a + 2; println!(\u0026#34;Hello\u0026#34;); yield a * 2; println!(\u0026#34;world!\u0026#34;); }; Pin::new(\u0026amp;mut generator).resume(()); Pin::new(\u0026amp;mut generator).resume(()); } 上述代码会生成下面类似代码\nuse std::ops::Generator; use std::ops::GeneratorState; use std::pin::Pin; enum GeneratorStateMachine { Enter(i32), Yield1(i32), Yield2(i32), Exit, } impl Generator for GeneratorStateMachine { type Yield = i32; type Return = (); fn resume(\u0026amp;mut self) -\u0026gt; GeneratorState\u0026lt;Self::Yield, Self::Return\u0026gt; { // lets us get ownership over current state match std::mem::replace(self, GeneratorStateMachine::Exit) { GeneratorStateMachine::Enter(a) =\u0026gt; { println!(\u0026#34;start\u0026#34;); /*---- code before yield 1 ----*/ *self = GeneratorStateMachine::Yield1(a + 2); GeneratorState::Yield(a) } GeneratorStateMachine::Yield1(a) =\u0026gt; { /*----- code after yield 1 -----*/ println!(\u0026#34;Hello\u0026#34;); *self = GeneratorStateMachine::Yield2(a * 2); /*----- code before yield 2 -----*/ GeneratorState::Yielded(a * 2) } GeneratorStateMachine::Yield2(_) =\u0026gt; { /*----- code after yield 2 -----*/ println!(\u0026#34;world!\u0026#34;); *self = GeneratorStateMachine::Exit; GeneratorState::Complete(()) } GeneratorStateMachine::Exit =\u0026gt; panic!(\u0026#34;Can\u0026#39;t advance an exited generator!\u0026#34;) } } } fn main() { let a: i32 = 1; let mut generator = move || { GeneratorStateMachine::Enter(a) }; Pin::new(\u0026amp;mut generator).resume(()); // 1 + 2 = 3 Pin::new(\u0026amp;mut generator).resume(()); // 3 * 2 = 6 } 这种实现方式的特点是, 状态对象捕获和储存变量到自身, 无需切换上下文(CPU状态保存和恢复的消耗), 无动态堆/栈分配, 完全契合rust零开销抽象的原则\n参考 generators\n","date":"2020.03.09","permalink":"https://qcute.github.io/posts/rust/async-await/","summy":"1. async/await 异步函数 async fn f0() -\u0026gt; u32 { let f1 = f1().await; let f2 = f2().await; f1 + f2 } async fn f1() -\u0026gt; u32 { 1 } async fn f2() -\u0026gt; u32 { 2 } 生成的HIR Playground左上角点HIR async fn f0() -\u0026gt; /*impl Trait*/ #[lang = \u0026#34;from_generator\u0026#34;](move |mut _task_context| {{ let _t = { let f1 = match #[lang = \u0026#34;into_future\u0026#34;](f1()) { mut __awaitee =\u0026gt; loop { match unsafe { #[lang = \u0026#34;poll\u0026#34;](#[lang = \u0026#34;new_unchecked\u0026#34;](\u0026amp;mut","tags":null,"title":"Rust async/await初探"},{"categories":["php"],"contents":"Symfony Process组件使用SSH交互的问题\n打开PTY模式即可\n$env = [\u0026#39;PATH\u0026#39; =\u0026gt; getenv(\u0026#39;PATH\u0026#39;), \u0026#39;SSH_AUTH_SOCK\u0026#39; =\u0026gt; getenv(\u0026#39;SSH_AUTH_SOCK\u0026#39;)] $process = new Process([\u0026#39;ssh\u0026#39;, \u0026#39;username@host\u0026#39;, \u0026#39;echo 1\u0026#39;], null, $env); // turning on PTY support $process-\u0026gt;setPty(true); $process-\u0026gt;run(); echo $process-\u0026gt;getOutput(); 参考\nControlling an interactive process\n","date":"2020.03.09","permalink":"https://qcute.github.io/posts/php/symfony-process/","summy":"Symfony Process组件使用SSH交互的问题 打开PTY模式即可 $env = [\u0026#39;PATH\u0026#39; =\u0026gt; getenv(\u0026#39;PATH\u0026#39;), \u0026#39;SSH_AUTH_SOCK\u0026#39; =\u0026gt; getenv(\u0026#39;SSH_AUTH_SOCK\u0026#39;)] $process = new Process([\u0026#39;ssh\u0026#39;, \u0026#39;username@host\u0026#39;, \u0026#39;echo 1\u0026#39;], null, $env); // turning on PTY support $process-\u0026gt;setPty(true); $process-\u0026gt;run(); echo $process-\u0026gt;getOutput(); 参考 Controlling an interactive process","tags":null,"title":"Symfony Process组件交互式进程问题"},{"categories":["mysql"],"contents":"MySQL的row_id在: 非联合主键，非空数字类型第一个非联合唯一索引\n","date":"2020.03.08","permalink":"https://qcute.github.io/posts/mysql/mysql-row-id/","summy":"MySQL的row_id在: 非联合主键，非空数字类型第一个非联合唯一索引","tags":null,"title":"MySQL的row_id"},{"categories":["misc"],"contents":" 新建git-shell-commands/svn-shell-commands目录 # git mkdir -p git-shell-commands # svn mkdir -p svn-shell-commands 创建no-interactive-login文件 # git cat \u0026gt; git-shell-commands/no-interactive-login \u0026lt;\u0026lt; EOF #!/bin/sh printf \u0026#39;%s\\n\u0026#39; \u0026#34;Hi $USER! You\u0026#39;ve successfully authenticated, but I does not provide interactive shell access.\u0026#34; exit 128 EOF chmod +x git-shell-commands/no-interactive-login # svn cat \u0026gt; svn-shell-commands/no-interactive-login \u0026lt;\u0026lt; EOF #!/bin/sh printf \u0026#39;%s\\n\u0026#39; \u0026#34;Hi $USER! You\u0026#39;ve successfully authenticated, but I does not provide interactive shell access.\u0026#34; exit 128 EOF chmod +x svn-shell-commands/no-interactive-login 配置sshd_config # git Match User git X11Forwarding no AllowTcpForwarding no PermitTTY no AuthenticationMethods publickey ForceCommand /bin/bash -c \u0026#34;if [[ -n \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34; ]];then /bin/git-shell -c \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34;; else /bin/git-shell; fi\u0026#34; # svn Match User svn X11Forwarding no AllowTcpForwarding no PermitTTY no AuthenticationMethods publickey ForceCommand /bin/bash -c \u0026#34;if [[ -n \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34; ]];then /bin/svn-shell -c \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34;; else /bin/svn-shell; fi\u0026#34; SSH登录时显示 Hi git! You\u0026rsquo;ve successfully authenticated, but I does not provide shell access.\nHi svn! You\u0026rsquo;ve successfully authenticated, but I does not provide shell access.\n","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/git-svn-ssh-no-login/","summy":"新建git-shell-commands/svn-shell-commands目录 # git mkdir -p git-shell-commands # svn mkdir -p svn-shell-commands 创建no-interactive-login文件 # git cat \u0026gt; git-shell-commands/no-interactive-login \u0026lt;\u0026lt; EOF #!/bin/sh printf \u0026#39;%s\\n\u0026#39; \u0026#34;Hi $USER! You\u0026#39;ve successfully authenticated, but I does not provide interactive shell access.\u0026#34; exit 128","tags":null,"title":"Git/SVN禁止SSH登录shell并输出提示"},{"categories":["misc"],"contents":"SSH配置方面和通常用Git一样，密码或者Key。\n当SVN使用SSH时，SVN用户名用的就是SSH登录的用户名，所以配置就很简单明了。\n仓库认证配置 conf/authz\n[/] ... # 本机用户名 = 权限 username = rw ... 仓库密码配置 conf/passwd\n[users] ... # 为了方便使用，无密码 # 本机用户名 = username = ... 当SSH端口不是22的时候\n配置 ~/.subversion/config\n[tunnels] ... ssh = ssh -p 22222 ... 然后\n# 使用绝对SVN目录路径 svn checkout svn+ssh://USERNAME@SSH_HOST/path/to/the-svn-repo 要想禁止SSH Key登录shell, 需要在.ssh/authorized_keys上设置\n# --tunnel-user 不设置默认就是SSH用户名 command=\u0026#34;svnserve --root=\u0026lt;ReposRootPath\u0026gt; --tunnel --tunnel-user=\u0026lt;RepoAuthUsername\u0026gt;\u0026#34;,no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty ssh-rsa \u0026lt;YourPublicKey\u0026gt; \u0026lt;Comment\u0026gt; 然后\n# 使用相对SVN根目录路径 svn checkout svn+ssh://USERNAME@SSH_HOST/the-svn-repo 想要像git-shelll一样, 可使用svn-shell, 这样就可以在正常服务的同时禁止SSH Key登录并显示友好信息\nWiddows客户端使用参考\nSecuring Svnserve using SSH\n用户以及用户组等和平常运维时一样\nMatch User git X11Forwarding no AllowTcpForwarding no PermitTTY no AuthenticationMethods publickey ForceCommand /bin/bash -c \u0026#34;if [[ -n \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34; ]];then /bin/git-shell -c \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34;; else /bin/git-shell; fi\u0026#34; Match User svn X11Forwarding no AllowTcpForwarding no PermitTTY no AuthenticationMethods publickey ForceCommand /bin/bash -c \u0026#34;if [[ -n \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34; ]];then /bin/svn-shell -c \\\u0026#34;$SSH_ORIGINAL_COMMAND\\\u0026#34;; else /bin/svn-shell; fi\u0026#34; ","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/svn-ssh/","summy":"SSH配置方面和通常用Git一样，密码或者Key。 当SVN使用SSH时，SVN用户名用的就是SSH登录的用户名，所以配置就很简单明了。 仓库认证配置 conf/authz [/] ... # 本机用户名 = 权限 username = rw ... 仓库密码配置 conf/passwd [users] ... # 为","tags":null,"title":"SVN使用SSH"},{"categories":["misc"],"contents":"\n服务器管理器负责逻辑服务器负载均衡和断线重连服务 客户端请求服务器管理器获取逻辑服务器地址 客户端使用公共服务可使用逻辑服务代理转发请求也可直接连接到公共服务 逻辑和公共服务启动时加入到节点管理器 数据库使用热库进行实时服务, 冷库(备份)进行分析审计, 或者替换为TiDB等NewSQL ","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/server/","summy":"服务器管理器负责逻辑服务器负载均衡和断线重连服务 客户端请求服务器管理器获取逻辑服务器地址 客户端使用公共服务可使用逻辑服务代理转发请求也可直接连接到公共服务 逻辑和公共服务启动时加入到节点管理器 数据库使用","tags":null,"title":"服务端简单的框架图"},{"categories":["misc"],"contents":"1. 在商店打开App页面 2. 找到分享按钮, 复制链接 3. 打开解析网站, 填入地址获取 4. 选择后缀为.appxbundle或者.appx的下载安装即可 解析地址https://store.rg-adguard.net\n","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/fetch-windows-store-app-link/","summy":"1. 在商店打开App页面 2. 找到分享按钮, 复制链接 3. 打开解析网站, 填入地址获取 4. 选择后缀为.appxbundle或者.appx的下载安装即可 解析地址https://store.rg-adguard.net","tags":null,"title":"获取Windows Store App下载地址"},{"categories":["misc"],"contents":" API \u0026lt;?php class BusComing { /** Construct * @date 2022/03/20 * * @param string $userId * @param string $h5Id */ public function __construct(string $userId = \u0026#39;\u0026#39;, string $h5Id = \u0026#39;\u0026#39;) { $this-\u0026gt;userId = $userId; // the h5Id default userId $this-\u0026gt;h5Id = empty($h5Id) ? $userId : $h5Id; // user agent $this-\u0026gt;userAgent = \u0026#39;Mozilla/5.0 (Linux; Android 10; MI 6 Build/PKQ1.190118.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.0000.00 XWEB/3193 MMWEBSDK/20220202 Mobile Safari/537.36 MMWEBID/5374 MicroMessenger/8.0.20.2100(0x28001437) Process/appbrand1 WeChat/arm64 Weixin NetType/WIFI Language/zh_CN ABI/arm64 MiniProgramEnv/android\u0026#39;; } /** Set user agent * * @param string $userAgent */ public function setUserAgent(string $userAgent = \u0026#39;\u0026#39;) { $this-\u0026gt;userAgent = $userAgent; } /** cURL request * * @param string $url * @param array $header * @param string $userAgent * @param string $proxy * * @return string */ private static function curl(string $url = \u0026#39;\u0026#39;, array $header = [], string $userAgent = \u0026#39;\u0026#39;, string $proxy = \u0026#39;\u0026#39;): string { // parse header $header = array_map(function ($key, $value) { return $key . \u0026#39;:\u0026#39; . $value; }, array_keys($header), $header); // curl $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $url); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); curl_setopt($curl, CURLOPT_HTTPHEADER, $header); curl_setopt($curl, CURLOPT_PROXY, $proxy); curl_setopt($curl, CURLOPT_USERAGENT, $userAgent); curl_setopt($curl, CURLOPT_ENCODING, \u0026#39;gzip,deflate\u0026#39;); $output = curl_exec($curl); curl_close($curl); return $output; } /** Search buses/lines detail * * @param array $param * @param string $proxy * * @return array */ public function searchLines(array $param = [], $proxy = \u0026#39;\u0026#39;): array { $preset = [ \u0026#39;s\u0026#39; =\u0026gt; \u0026#39;h5\u0026#39;, \u0026#39;wxs\u0026#39; =\u0026gt; \u0026#39;wx_app\u0026#39;, \u0026#39;sign\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;h5RealData\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;v\u0026#39; =\u0026gt; \u0026#39;4.0.00\u0026#39;, \u0026#39;src\u0026#39; =\u0026gt; \u0026#39;weixinapp_cx\u0026#39;, \u0026#39;ctm_mp\u0026#39; =\u0026gt; \u0026#39;mp_wx\u0026#39;, \u0026#39;vc\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;cityId\u0026#39; =\u0026gt; \u0026#39;040\u0026#39;, // not 020 in canton, so strange \u0026#39;favoriteGray\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, \u0026#39;userId\u0026#39; =\u0026gt; $this-\u0026gt;userId, \u0026#39;h5Id\u0026#39; =\u0026gt; $this-\u0026gt;h5Id, \u0026#39;lat\u0026#39; =\u0026gt; \u0026#39;23.123603\u0026#39;, // latitude \u0026#39;lng\u0026#39; =\u0026gt; \u0026#39;113.384541\u0026#39;, // longitude \u0026#39;geo_lat\u0026#39; =\u0026gt; \u0026#39;23.123603\u0026#39;, // geo latitude =\u0026gt; lat \u0026#39;geo_lng\u0026#39; =\u0026gt; \u0026#39;113.384541\u0026#39;, // geo longitude =\u0026gt; lng \u0026#39;gpstype\u0026#39; =\u0026gt; \u0026#39;wgs\u0026#39;, \u0026#39;geo_type\u0026#39; =\u0026gt; \u0026#39;wgs\u0026#39;, \u0026#39;scene\u0026#39; =\u0026gt; \u0026#39;1006\u0026#39;, \u0026#39;localCityId\u0026#39; =\u0026gt; \u0026#39;040\u0026#39;, // not 020 in canton, so strange \u0026#39;key\u0026#39; =\u0026gt; \u0026#39;28\u0026#39;, \u0026#39;poiNum\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, ]; // merge params $param = array_merge($preset, $param); // parse params $param = array_map(function ($key, $value) { return $key . \u0026#39;=\u0026#39; . $value; }, array_keys($param), $param); $url = \u0026#39;https://web.chelaile.net.cn/api/bus/query!nSearch.action?\u0026#39; . implode(\u0026#39;\u0026amp;\u0026#39;, $param); $header = [ \u0026#39;Connection\u0026#39; =\u0026gt; \u0026#39;keep-alive\u0026#39;, \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf-8\u0026#39;, \u0026#39;content-type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, \u0026#39;Accept-Encoding\u0026#39; =\u0026gt; \u0026#39;gzip,compress,br,deflate\u0026#39;, \u0026#39;Referer\u0026#39; =\u0026gt; \u0026#39;https://servicewechat.com/wx71d589ea01ce3321/543/page-frame.html\u0026#39;, ]; $string = self::curl($url, $header, $this-\u0026gt;userAgent, $proxy); // example **YGJK{}YGJK## $json = json_decode(substr(substr($string, 6), 0, -6), true) ?? [\u0026#39;jsonr\u0026#39; =\u0026gt; [\u0026#39;data\u0026#39; =\u0026gt; [\u0026#39;result\u0026#39; =\u0026gt; []], \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;00\u0026#39;]]; return $json[\u0026#39;jsonr\u0026#39;][\u0026#39;data\u0026#39;][\u0026#39;result\u0026#39;]; } /** Get line detail * * @param array $param * @param string $proxy * * @return array */ public function getLineDetail(array $param = [], $proxy = \u0026#39;\u0026#39;): array { $preset = [ \u0026#39;s\u0026#39; =\u0026gt; \u0026#39;h5\u0026#39;, \u0026#39;wxs\u0026#39; =\u0026gt; \u0026#39;wx_app\u0026#39;, \u0026#39;sign\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;h5RealData\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;v\u0026#39; =\u0026gt; \u0026#39;4.0.00\u0026#39;, // version \u0026#39;src\u0026#39; =\u0026gt; \u0026#39;weixinapp_cx\u0026#39;, \u0026#39;ctm_mp\u0026#39; =\u0026gt; \u0026#39;mp_wx\u0026#39;, \u0026#39;vc\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;cityId\u0026#39; =\u0026gt; \u0026#39;040\u0026#39;, // not 020 in canton, so strange \u0026#39;favoriteGray\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, \u0026#39;userId\u0026#39; =\u0026gt; $this-\u0026gt;userId, \u0026#39;h5Id\u0026#39; =\u0026gt; $this-\u0026gt;h5Id, \u0026#39;lat\u0026#39; =\u0026gt; \u0026#39;23.123603\u0026#39;, // latitude \u0026#39;lng\u0026#39; =\u0026gt; \u0026#39;113.384541\u0026#39;, // longitude \u0026#39;geo_lat\u0026#39; =\u0026gt; \u0026#39;23.123603\u0026#39;, // geo latitude =\u0026gt; lat \u0026#39;geo_lng\u0026#39; =\u0026gt; \u0026#39;113.384541\u0026#39;, // geo longitude =\u0026gt; lng \u0026#39;gpstype\u0026#39; =\u0026gt; \u0026#39;wgs\u0026#39;, \u0026#39;geo_type\u0026#39; =\u0026gt; \u0026#39;wgs\u0026#39;, \u0026#39;scene\u0026#39; =\u0026gt; \u0026#39;1001\u0026#39;, \u0026#39;lineId\u0026#39; =\u0026gt; \u0026#39;020-00280-1\u0026#39;, // cityId-lineId-order(forward: 0/backward: 1) \u0026#39;targetOrder\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, // station order \u0026#39;special\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, \u0026#39;specialOrder\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, // station order \u0026#39;specialType\u0026#39; =\u0026gt; \u0026#39;undefined\u0026#39;, \u0026#39;specialTargetOrder\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, // station order \u0026#39;stationId\u0026#39; =\u0026gt; \u0026#39;020-18462\u0026#39;, // bus station id \u0026#39;grey_city\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;localCityId\u0026#39; =\u0026gt; \u0026#39;040\u0026#39;, // not 020 in canton, so strange \u0026#39;permission\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, \u0026#39;cryptoSign\u0026#39; =\u0026gt; \u0026#39;d4f6d9ba4bd88dc8c8070de0aeb72e74\u0026#39;, ]; // merge params $param = array_merge($preset, $param); // parse params $param = array_map(function ($key, $value) { return $key . \u0026#39;=\u0026#39; . $value; }, array_keys($param), $param); $url = \u0026#39;https://web.chelaile.net.cn/api/bus/line!encryptedLineDetail.action?\u0026#39; . implode(\u0026#39;\u0026amp;\u0026#39;, $param); $header = [ \u0026#39;Connection\u0026#39; =\u0026gt; \u0026#39;keep-alive\u0026#39;, \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf-8\u0026#39;, \u0026#39;content-type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, \u0026#39;Accept-Encoding\u0026#39; =\u0026gt; \u0026#39;gzip,compress,br,deflate\u0026#39;, \u0026#39;Referer\u0026#39; =\u0026gt; \u0026#39;https://servicewechat.com/wx71d589ea01ce3321/543/page-frame.html\u0026#39;, ]; $string = self::curl($url, $header, $this-\u0026gt;userAgent, $proxy); // example **YGJK{}YGJK## $json = json_decode(substr(substr($string, 6), 0, -6), true) ?? [\u0026#39;jsonr\u0026#39; =\u0026gt; [\u0026#39;data\u0026#39; =\u0026gt; [\u0026#39;encryptResult\u0026#39; =\u0026gt; \u0026#39;\u0026#39;], \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;00\u0026#39;]]; $data = $json[\u0026#39;jsonr\u0026#39;][\u0026#39;data\u0026#39;]; // mode and key take from fetcher.encrypt.js in wechat mini app $string = openssl_decrypt($data[\u0026#39;encryptResult\u0026#39;], \u0026#39;aes-256-ecb\u0026#39;, \u0026#39;FF32AE65FBFD19414EAAFF6291A54B42\u0026#39;); return json_decode($string, true) ?? []; } /** Get buses detail * * @param array $param * @param string $proxy * * @return array */ public function getBusesDetail(array $param = [], $proxy = \u0026#39;\u0026#39;): array { $preset = [ \u0026#39;s\u0026#39; =\u0026gt; \u0026#39;h5\u0026#39;, \u0026#39;wxs\u0026#39; =\u0026gt; \u0026#39;wx_app\u0026#39;, \u0026#39;sign\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;h5RealData\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;v\u0026#39; =\u0026gt; \u0026#39;4.0.00\u0026#39;, // version \u0026#39;src\u0026#39; =\u0026gt; \u0026#39;weixinapp_cx\u0026#39;, \u0026#39;ctm_mp\u0026#39; =\u0026gt; \u0026#39;mp_wx\u0026#39;, \u0026#39;vc\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;cityId\u0026#39; =\u0026gt; \u0026#39;040\u0026#39;, // not 020 in canton, so strange \u0026#39;favoriteGray\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, \u0026#39;userId\u0026#39; =\u0026gt; $this-\u0026gt;userId, \u0026#39;h5Id\u0026#39; =\u0026gt; $this-\u0026gt;h5Id, \u0026#39;lat\u0026#39; =\u0026gt; \u0026#39;23.123603\u0026#39;, // latitude \u0026#39;lng\u0026#39; =\u0026gt; \u0026#39;113.384541\u0026#39;, // longitude \u0026#39;geo_lat\u0026#39; =\u0026gt; \u0026#39;23.123603\u0026#39;, // geo latitude =\u0026gt; lat \u0026#39;geo_lng\u0026#39; =\u0026gt; \u0026#39;113.384541\u0026#39;, // geo longitude =\u0026gt; lng \u0026#39;gpstype\u0026#39; =\u0026gt; \u0026#39;wgs\u0026#39;, \u0026#39;geo_type\u0026#39; =\u0026gt; \u0026#39;wgs\u0026#39;, \u0026#39;scene\u0026#39; =\u0026gt; \u0026#39;1001\u0026#39;, \u0026#39;lineId\u0026#39; =\u0026gt; \u0026#39;020-00280-1\u0026#39;, // cityId-lineId-order(forward: 0/backward: 1) \u0026#39;targetOrder\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;specialTargetOrder\u0026#39; =\u0026gt; \u0026#39;1\u0026#39;, \u0026#39;specail\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, \u0026#39;stationId\u0026#39; =\u0026gt; \u0026#39;020-4608\u0026#39;, // bus station id \u0026#39;specialType\u0026#39; =\u0026gt; \u0026#39;undefined\u0026#39;, \u0026#39;cshow\u0026#39; =\u0026gt; \u0026#39;busDetail\u0026#39;, ]; // merge params $param = array_merge($preset, $param); // parse params $param = array_map(function ($key, $value) { return $key . \u0026#39;=\u0026#39; . $value; }, array_keys($param), $param); $url = \u0026#39;https://web.chelaile.net.cn/api/bus/line!busesDetail.action?\u0026#39; . implode(\u0026#39;\u0026amp;\u0026#39;, $param); $header = [ \u0026#39;Connection\u0026#39; =\u0026gt; \u0026#39;keep-alive\u0026#39;, \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf-8\u0026#39;, \u0026#39;content-type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, \u0026#39;Accept-Encoding\u0026#39; =\u0026gt; \u0026#39;gzip,compress,br,deflate\u0026#39;, \u0026#39;Referer\u0026#39; =\u0026gt; \u0026#39;https://servicewechat.com/wx71d589ea01ce3321/543/page-frame.html\u0026#39;, ]; $string = self::curl($url, $header, $this-\u0026gt;userAgent, $proxy); // example **YGJK{}YGJK## $json = json_decode(substr(substr($string, 6), 0, -6), true) ?? [\u0026#39;jsonr\u0026#39; =\u0026gt; [\u0026#39;data\u0026#39; =\u0026gt; [], \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;00\u0026#39;]]; return $json[\u0026#39;jsonr\u0026#39;][\u0026#39;data\u0026#39;]; } } 使用 echo \u0026#34;\u0026lt;pre\u0026gt;\u0026#34;; $bus = new BusComing(\u0026#39;okBHq0ETXAjgKH5HcIltsNaV3Lsk\u0026#39;); echo \u0026#34;result of buses/lines: \u0026lt;br/\u0026gt;\u0026#34;; // lines 线路信息 print_r($bus-\u0026gt;searchLines()); echo \u0026#34;line detail: \u0026lt;br/\u0026gt;\u0026#34;; // stations 站点信息 print_r($bus-\u0026gt;getLineDetail()); echo \u0026#34;bus detail: \u0026lt;br/\u0026gt;\u0026#34;; // buses 公交信息 print_r($bus-\u0026gt;getBusesDetail()); echo \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;; PHP依赖 cURL模块 OpenSSL模块\n","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/bus-coming/","summy":"API \u0026lt;?php class BusComing { /** Construct * @date 2022/03/20 * * @param string $userId * @param string $h5Id */ public function __construct(string $userId = \u0026#39;\u0026#39;, string $h5Id = \u0026#39;\u0026#39;) { $this-\u0026gt;userId = $userId; // the h5Id default userId $this-\u0026gt;h5Id = empty($h5Id) ? $userId : $h5Id; // user agent $this-\u0026gt;userAgent = \u0026#39;Mozilla/5.0 (Linux; Android 10; MI 6 Build/PKQ1.190118.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.0000.00 XWEB/3193 MMWEBSDK/20220202 Mobile Safari/537.36 MMWEBID/5374 MicroMessenger/8.0.20.2100(0x28001437) Process/appbrand1 WeChat/arm64 Weixin NetType/WIFI Language/zh_CN ABI/arm64 MiniProgramEnv/android\u0026#39;; } /** Set user agent * * @param string $userAgent */ public function setUserAgent(string $userAgent = \u0026#39;\u0026#39;) { $this-\u0026gt;userAgent = $userAgent; }","tags":null,"title":"某实时公交API"},{"categories":["misc"],"contents":"现在招聘网站几乎都不展示职位的原始发布日期，很多发布了好几个月甚至是好几年的职位，放着用来吸引简历，极大的浪费了求职者的时间、精力和感情。\n个人推荐BOSS直聘，无效职位相对较少，主动询问大多数有回复，而其他网站大多数已读不回\n而高端职位则推荐猎聘，无论是HR还是猎头，职位匹配度、专业程度和回复效率都比较高\n// 查找数据 const scripts = Array // 找全部script .from(document.querySelectorAll(\u0026#39;script\u0026#39;)) // 筛选类型为application/ld+json .filter((s) =\u0026gt; s.type == \u0026#34;application/ld+json\u0026#34;) // 提取script内容 .map((s) =\u0026gt; s.innerText); // 转JSON const data = JSON.parse(scripts[0]); // BOSS直聘内容样例 // { // \u0026#34;@context\u0026#34;: \u0026#34;https://zhanzhang.baidu.com/contexts/cambrian.jsonld\u0026#34;, // \u0026#34;@id\u0026#34;: \u0026#34;https://www.zhipin.com/job_detail/example.html\u0026#34;, // \u0026#34;title\u0026#34;: \u0026#34;「标题」_公司名称招聘-BOSS直聘\u0026#34;, // \u0026#34;description\u0026#34;: \u0026#34;职位描述\u0026#34;, // \u0026#34;pubDate\u0026#34;: \u0026#34;2020-03-03T00:00:00\u0026#34;, // \u0026#34;upDate\u0026#34;: \u0026#34;2022-03-03T00:00:00\u0026#34; // } // // 其中pubDate字段就是发布日期 // 猎聘内容样例 // { // \u0026#34;@context\u0026#34;: \u0026#34;https://ziyuan.baidu.com/contexts/cambrian.jsonld\u0026#34;, // \u0026#34;appid\u0026#34;: \u0026#34;appid\u0026#34;, // \u0026#34;@id\u0026#34;: \u0026#34;https://www.liepin.com/job/example.shtml\u0026#34;, // \u0026#34;title\u0026#34;: \u0026#34;【标题】_公司名称招聘信息-猎聘\u0026#34;, // \u0026#34;description\u0026#34;: \u0026#34;职位描述\u0026#34;, // \u0026#34;pubDate\u0026#34;: \u0026#34;2020-05-05T00:00:00\u0026#34;, // \u0026#34;upDate\u0026#34;: \u0026#34;2022-05-05T00:00:00\u0026#34; // } // // 其中pubDate字段就是发布日期 目前前程无忧，智联，拉钩还无法获取到真实的发布日期\n","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/job-publish-date/","summy":"现在招聘网站几乎都不展示职位的原始发布日期，很多发布了好几个月甚至是好几年的职位，放着用来吸引简历，极大的浪费了求职者的时间、精力和感情。 个人推荐BOSS直聘，无效职位相对较少，主动询问大多数有回复，","tags":null,"title":"求职网站发布日期"},{"categories":["misc"],"contents":"\n在Google搜索hugo主题时, 在这里发现了一个简约的hugo主题\nGitHub地址: zozo\n","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/hugo-theme/","summy":"在Google搜索hugo主题时, 在这里发现了一个简约的hugo主题 GitHub地址: zozo","tags":null,"title":"推荐一个简约的hugo主题"},{"categories":["misc"],"contents":"在一次下载ROM时偶然发现了一个速度比较快的镜像站点\nliquidtelecom.dl.sourceforge.net\n例如我下载时获取到的链接为\nhttps://nchc.dl.sourceforge.net/project/\u0026hellip;..\n替换为\nhttps://liquidtelecom.dl.sourceforge.net/project/\u0026hellip;..\n在50M电信带宽下, 平均下载速度可以达到2-3MB/s, 比其他站点几十KB/s快了不少\n搭配多线程下载器, 例如基于Aria2的Motrix下载速度可以更快\n","date":"2020.03.07","permalink":"https://qcute.github.io/posts/misc/sourceforge-mirror/","summy":"在一次下载ROM时偶然发现了一个速度比较快的镜像站点 liquidtelecom.dl.sourceforge.net 例如我下载时获取到的链接为 https://nchc.dl.sourceforge.net/project/\u0026hellip;.. 替换为 https://liquidtelecom.dl.sourceforge.net/project/\u0026hellip;.. 在50M电信带宽下, 平均下载速度可以达到2-3MB/s, 比其他站点几十KB/s快了不少 搭配多线程下载器, 例如基","tags":null,"title":"一个比较快的SourceForge镜像站点"},{"categories":["llvm"],"contents":"1 .c(源文件) -\u0026gt; .i(预处理文件) clang -E -c test.c -o test.i 1.1 .c(源文件) -\u0026gt; .bc(LLVM IR文件(二进制形式)) clang -emit-llvm test.c -c -o test.bc 1.2 .c(源文件) -\u0026gt; .ll(LLVM IR文件(文本形式)) clang -emit-llvm test.c -S -o test.ll 2 .i(预处理文件) -\u0026gt; .bc(LLVM IR文件(二进制形式)) clang -emit-llvm test.i -c -o test.bc 2.1 .i(预处理文件) -\u0026gt; .ll(LLVM IR文件(文本形式)) clang -emit-llvm test.i -S -o test.ll 2.2 .bc(LLVM IR文件(二进制形式)) -\u0026gt; .ll(LLVM IR文件(文本形式)) llvm-dis test.bc -o test.ll 2.3 .ll(LLVM IR文件(文本形式)) -\u0026gt; .bc(LLVM IR文件(二进制形式)) llvm-as test.ll -o test.bc 2.4 把多个 .bc 合并为一个 .bc llvm-link test1.bc test2.bc -o test.bc 3 .bc(LLVM IR文件(二进制形式)) -\u0026gt; .s(汇编文件) llc --march=x86-64 test.bc 4 .s(汇编文件) -\u0026gt; .o(可重定位的对象文件) clang -c test.s -o test.o 5 .o(可重定位的对象文件) -\u0026gt; elf(可执行文件) ld.lld -o test test.o ","date":"2020.03.06","permalink":"https://qcute.github.io/posts/llvm/clang-llvm-flow/","summy":"1 .c(源文件) -\u0026gt; .i(预处理文件) clang -E -c test.c -o test.i 1.1 .c(源文件) -\u0026gt; .bc(LLVM IR文件(二进制形式)) clang -emit-llvm test.c -c -o test.bc 1.2 .c(源文件) -\u0026gt; .ll(LLVM IR文件(文本形式)) clang -emit-llvm test.c -S -o test.ll 2 .i(预处理文件) -\u0026gt; .bc(LLVM IR文件(二进制形","tags":null,"title":"Clang/LLVM编译流程"},{"categories":["js"],"contents":"function randomPassword(length) { const charArray = [ // 数字 \u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;, // 大写字母 \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;F\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;H\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;N\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;P\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;S\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;U\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;W\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;Y\u0026#34;, \u0026#34;Z\u0026#34;, // 小写字母 \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;h\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;j\u0026#34;, \u0026#34;k\u0026#34;, \u0026#34;l\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;n\u0026#34;, \u0026#34;o\u0026#34;, \u0026#34;p\u0026#34;, \u0026#34;q\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;s\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;u\u0026#34;, \u0026#34;v\u0026#34;, \u0026#34;w\u0026#34;, \u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;z\u0026#34;, ]; return Array.from({length}, () =\u0026gt; charArray[Math.trunc(Math.random() * charArray.length)]).join(\u0026#34;\u0026#34;); } ","date":"2020.03.06","permalink":"https://qcute.github.io/posts/js/random-password/","summy":"function randomPassword(length) { const charArray = [ // 数字 \u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;, // 大写字母 \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;F\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;H\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;N\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;P\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;S\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;U\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;W\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;Y\u0026#34;, \u0026#34;Z\u0026#34;, // 小写字母 \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;h\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;j\u0026#34;, \u0026#34;k\u0026#34;, \u0026#34;l\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;n\u0026#34;, \u0026#34;o\u0026#34;, \u0026#34;p\u0026#34;, \u0026#34;q\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;s\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;u\u0026#34;, \u0026#34;v\u0026#34;, \u0026#34;w\u0026#34;, \u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;z\u0026#34;, ]; return Array.from({length}, () =\u0026gt; charArray[Math.trunc(Math.random() * charArray.length)]).join(\u0026#34;\u0026#34;); }","tags":null,"title":"JS简单随机密码"},{"categories":["js"],"contents":"在前端页面中，由于div元素没有相应onresize事件，当ECharts图形在容器div发生变化时，没有像浏览器窗口发生变化的时候能够自适应调整大小。\n在窗口变化时，有效\n// 正常 window.onresize = () =\u0026gt; chart.resize(); 在div容器变化时，无效\n// 无效 document.querySelector(\u0026#39;#chart\u0026#39;).onresize = () =\u0026gt; chart.resize(); 其他JQuery的解决方案都太麻烦了，最简单的就是使用ResizeObserver API监听div容器的变化\n(new ResizeObserver(() =\u0026gt; chart.resize())).observe(document.querySelector(\u0026#39;#chart\u0026#39;)); 记得注意下浏览器兼容性\n","date":"2020.03.06","permalink":"https://qcute.github.io/posts/js/resize-observer/","summy":"在前端页面中，由于div元素没有相应onresize事件，当ECharts图形在容器div发生变化时，没有像浏览器窗口发生变化的时候能够自适应调整大小。 在窗口变化时，有效 // 正常 window.onresize = () =\u0026gt; chart.resize(); 在div容器变","tags":null,"title":"使用ResizeObserver监听元素大小变化"},{"categories":["git"],"contents":"本地开发流程 克隆仓库(git clone git@xxx:xxx.git) 创建并切换到xxx_dev分支(git checkout -b xxx_dev或者git switch -c xxx_dev) 开发 开发完成(git add/stage xxx) 提交(git commit -m \u0026ldquo;xxx\u0026rdquo;) 切换到master分支(git checkout master或者git switch master) 合并xxx_dev分支代码(git merge xxx_dev) 推送更新(git push origin master) 如果远端有更新, fast-forwards 以rebase方式拉取和合并代码(git pull \u0026ndash;rebase origin master) 若有冲突, 解决冲突, 然后再次推送更新 测试仓库流程 克隆仓库(git clone git@xxx:xxx.git) 创建并切换到dev分支(git checkout -b dev或者git switch -c dev) 配置生成 \u0026hellip; 储藏本地变更(git stash) 以rebase方式拉取和合并代码(git pull \u0026ndash;rebase origin master) 弹出储藏(git stash pop) 若有冲突, 使用策划的生成的配置数据(本地)覆盖(远端)提交的数据(git checkout \u0026ndash;theirs .) 暂存(git add/stage .)已解决的冲突, 再次弹出储藏完成更新 构建 ","date":"2020.03.05","permalink":"https://qcute.github.io/posts/git/git-work-flow/","summy":"本地开发流程 克隆仓库(git clone git@xxx:xxx.git) 创建并切换到xxx_dev分支(git checkout -b xxx_dev或者git switch -c xxx_dev) 开发 开发完成(git add/stage xxx) 提交(git commit -m \u0026ldquo;xxx\u0026rdquo;) 切换到master分支(git checkout master或者git","tags":null,"title":"Git工作流"},{"categories":["erlang"],"contents":"1. set/bag/duplicate_bag使用的是哈希表 IS_HASH_TABLE\n2. ordered_set使用的是AVL树 IS_TREE_TABLE\n为了提升并发写性能, 在OTP22之后引入了CAS(contention adapting search)树\nIS_CATREE_TABLE\n参考Erlang博客\nThe New Scalable ETS ordered_set\n","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/beam-ets/","summy":"1. set/bag/duplicate_bag使用的是哈希表 IS_HASH_TABLE 2. ordered_set使用的是AVL树 IS_TREE_TABLE 为了提升并发写性能, 在OTP22之后引入了CAS(contention adapting search)树 IS_CATREE_TABLE 参考Er","tags":null,"title":"Erlang ETS内部数据结构"},{"categories":["erlang"],"contents":"Record的更新使用的是erlang:setelement/3, 在更新多个字段的时候很浪费性能以及内存\n后来引入了一个破坏性的优化指令: set_tuple_element\n-record(record, {a, b, c, d, e, f}). update(R) -\u0026gt; R#record{a = 1, b = 2}. {function, update, 1, 8}. {label,7}. {line,[{location,\u0026#34;test.erl\u0026#34;,3}]}. {func_info,{atom,user_default},{atom,update},1}. {label,8}. {test,is_tagged_tuple,{f,9},[{x,0},7,{atom,record}]}. {allocate,0,1}. {move,{x,0},{x,1}}. {move,{integer,2},{x,2}}. {move,{integer,3},{x,0}}. {line,[{location,\u0026#34;test.erl\u0026#34;,4}]}. {call_ext,3,{extfunc,erlang,setelement,3}}. {set_tuple_element,{integer,1},{x,0},1}. {deallocate,0}. return. {label,9}. {move,{literal,{badrecord,record}},{x,0}}. {call_ext_only,1,{extfunc,erlang,error,1}}. 参考Github Issues\nDo the destructive setelement optimization in SSA\n","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/beam-set-tuple-element/","summy":"Record的更新使用的是erlang:setelement/3, 在更新多个字段的时候很浪费性能以及内存 后来引入了一个破坏性的优化指令: set_tuple_element -record(record, {a, b, c, d, e, f}). update(R) -\u0026gt; R#record{a = 1, b = 2}. {function, update, 1, 8}. {label,7}. {line,[{location,\u0026#34;test.erl\u0026#34;,3}]}. {func_info,{atom,user_default},{atom,update},1}. {label,8}. {test,is_tagged_tuple,{f,9},[{x,0},7,{atom,record}]}. {allocate,0,1}. {move,{x,0},{x,1}}. {move,{integer,2},{x,2}}. {move,{integer,3},{x,0}}. {line,[{location,\u0026#34;test.erl\u0026#34;,4}]}. {call_ext,3,{extfunc,erlang,setelement,3}}. {set_tuple_element,{integer,1},{x,0},1}.","tags":null,"title":"Erlang更新Record的优化"},{"categories":["erlang"],"contents":"以前以为进程表是用B树之类的存储, 后来才发现是用索引表\n参考Erlang内部文档\n进程和端口表\n代码\nErtsPTab\n学习了\n","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/beam-process-table/","summy":"以前以为进程表是用B树之类的存储, 后来才发现是用索引表 参考Erlang内部文档 进程和端口表 代码 ErtsPTab 学习了","tags":null,"title":"Erlang进程表"},{"categories":["erlang"],"contents":"erlang语义上绑定的变量是不可变的, 函数内也没有for/while/loop等循环\n但是, 函数式语言, 函数是第一等公民, 当然是可以通过命名高阶函数实现循环\n-module(test). main(_) -\u0026gt; Sum = fun Loop(10, Sum) -\u0026gt; Sum; Loop(N, Sum) -\u0026gt; Loop(N + 1, Sum + N) end(1, 0), io:format(\u0026#34;loop: ~p~n\u0026#34;, [Sum]). %% 45 有了这个, 在-eval上写脚本就方便了很多, 不用另外写在单独的脚本文件上\n","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/erlang-loop/","summy":"erlang语义上绑定的变量是不可变的, 函数内也没有for/while/loop等循环 但是, 函数式语言, 函数是第一等公民, 当然是可以通过命名高阶函数实现循环 -module(test). main(_) -\u0026gt; Sum = fun Loop(10, Sum) -\u0026gt; Sum; Loop(N, Sum) -\u0026gt; Loop(N + 1, Sum + N) end(1, 0), io:format(\u0026#34;loop:","tags":null,"title":"Erlang实现函数内的循环"},{"categories":["erlang"],"contents":"对于Bif 使用的是BIF_TRAP宏\n#define ERTS_BIF_PREP_TRAP(Export, Proc, Arity) \\ do { \\ (Proc)-\u0026gt;i = (Export)-\u0026gt;addresses[erts_active_code_ix()]; \\ (Proc)-\u0026gt;arity = (Arity); \\ (Proc)-\u0026gt;freason = TRAP; \\ } while(0); #define BIF_TRAP1(Trap_, p, A0) \\ do { \\ Eterm* reg = erts_proc_sched_data((p))-\u0026gt;registers-\u0026gt;x_reg_array.d; \\ ERTS_BIF_PREP_TRAP((Trap_), (p), 1); \\ reg[0] = (A0); \\ return THE_NON_VALUE; \\ } while(0) 可见, 保存当前PC, 寄存器数和失败原因还有调用参数\nbeam_hot.h下call_bif指令\nOpCase(call_light_bif_be): { Export *export; ErtsBifFunc bf; Eterm result; ErlHeapFragment *live_hf_end; bf = (ErtsBifFunc) I[1]; export = (Export*) I[2]; if (!((FCALLS - 1) \u0026gt; 0 || (FCALLS-1) \u0026gt; neg_o_reds)) { /* * If we have run out of reductions, do a context * switch before calling the BIF. */ c_p-\u0026gt;arity = GET_EXPORT_ARITY(export); c_p-\u0026gt;current = \u0026amp;export-\u0026gt;info.mfa; goto context_switch3; } if (ERTS_UNLIKELY(export-\u0026gt;is_bif_traced)) { ASSERT(VALID_INSTR(*(I+3))); *E = (BeamInstr) (I+3);; do { BeamInstr dis_next; Export *ep; ep = (Export*)(export); DTRACE_GLOBAL_CALL_FROM_EXPORT(c_p, ep); SET_I(ep-\u0026gt;addresses[erts_active_code_ix()]); CHECK_ARGS(I); dis_next = *I; if (ERTS_UNLIKELY(FCALLS \u0026lt;= 0)) { if (ERTS_PROC_GET_SAVED_CALLS_BUF(c_p) \u0026amp;\u0026amp; FCALLS \u0026gt; neg_o_reds) { save_calls(c_p, ep); } else { goto context_switch; } } FCALLS--; Goto(dis_next); } while (0); } ERTS_MSACC_SET_BIF_STATE_CACHED_X(GET_EXPORT_MODULE(export), bf); PRE_BIF_SWAPOUT(c_p); ERTS_DBG_CHK_REDS(c_p, FCALLS); c_p-\u0026gt;fcalls = FCALLS - 1; if (FCALLS \u0026lt;= 0) { save_calls(c_p, export); } ASSERT(!ERTS_PROC_IS_EXITING(c_p)); ERTS_VERIFY_UNUSED_TEMP_ALLOC(c_p); live_hf_end = c_p-\u0026gt;mbuf; ERTS_CHK_MBUF_SZ(c_p); result = (*bf)(c_p, reg, I); // 调用 /* Only heavy BIFs may GC. */ ASSERT(E == c_p-\u0026gt;stop); ERTS_CHK_MBUF_SZ(c_p); ASSERT(!ERTS_PROC_IS_EXITING(c_p) || is_non_value(result)); ERTS_VERIFY_UNUSED_TEMP_ALLOC(c_p); ERTS_HOLE_CHECK(c_p); ERTS_REQ_PROC_MAIN_LOCK(c_p); if (ERTS_IS_GC_AFTER_BIF_DESIRED(c_p)) { Uint arity = GET_EXPORT_ARITY(export); result = erts_gc_after_bif_call_lhf(c_p, live_hf_end, result, reg, arity); E = c_p-\u0026gt;stop; } HTOP = HEAP_TOP(c_p); FCALLS = c_p-\u0026gt;fcalls; PROCESS_MAIN_CHK_LOCKS(c_p); ERTS_DBG_CHK_REDS(c_p, FCALLS); /* * We have to update the cache if we are enabled in order * to make sure no bookkeeping is done after we disabled * msacc. We don\u0026#39;t always do this as it is quite expensive. */ if (ERTS_MSACC_IS_ENABLED_CACHED_X()) { ERTS_MSACC_UPDATE_CACHE_X(); } ERTS_MSACC_SET_STATE_CACHED_M_X(ERTS_MSACC_STATE_EMULATOR); if (ERTS_LIKELY(is_value(result))) { r(0) = result; CHECK_TERM(r(0)); SET_I((BeamInstr *) I+3); Goto(*I);; } else if (c_p-\u0026gt;freason == TRAP) { // 失败原因是trap的情况 /* * Set the continuation pointer to return to next * instruction after the trap (either by a return from * erlang code or by nif_bif.epilogue() when the BIF * is done). */ ASSERT(VALID_INSTR(*(I+3))); *E = (BeamInstr) (I+3);; SET_I(c_p-\u0026gt;i); do { BeamInstr dis_next; dis_next = *I; CHECK_ARGS(I); if (FCALLS \u0026gt; 0 || FCALLS \u0026gt; neg_o_reds) { // 还有REDS, 继续 FCALLS--; Goto(dis_next); } else { // 没有则切换上下文 goto context_switch; } } while (0); } /* * Error handling. SWAPOUT is not needed because it was done above. */ ASSERT(c_p-\u0026gt;stop == E); I = handle_error(c_p, I, reg, \u0026amp;export-\u0026gt;info.mfa); goto post_error_handling; ASSERT(!\u0026#34;Fell through \u0026#39;call_light_bif\u0026#39; (-no_next)\u0026#34;); } 对于Nif 使用的是YCF, YCF是一个源码转换工具, 使c语言支持yield功能, 相比其他有栈协程库, 它不需要保存调用栈\n","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/erlang-async/","summy":"对于Bif 使用的是BIF_TRAP宏 #define ERTS_BIF_PREP_TRAP(Export, Proc, Arity) \\ do { \\ (Proc)-\u0026gt;i = (Export)-\u0026gt;addresses[erts_active_code_ix()]; \\ (Proc)-\u0026gt;arity = (Arity); \\ (Proc)-\u0026gt;freason = TRAP; \\ } while(0); #define BIF_TRAP1(Trap_, p, A0) \\ do { \\ Eterm* reg = erts_proc_sched_data((p))-\u0026gt;registers-\u0026gt;x_reg_array.d; \\ ERTS_BIF_PREP_TRAP((Trap_), (p), 1); \\ reg[0] = (A0); \\ return THE_NON_VALUE; \\ } while(0) 可见, 保存当前PC, 寄存器数和失败原因还有调用参数 beam_hot.","tags":null,"title":"Erlang异步的实现"},{"categories":["erlang"],"contents":" 环境为RHEL/CentOS/RockyLinux 8\n1. 安装编译依赖 # 基础curses/ssl dnf install gcc make ncurses-devel openssl-devel -y # 可选hipe依赖 dnf install llvm autoconf m4 -y # 启用epel仓库 dnf install epel-release -y # 可选jdk/odbc/wxWidgets dnf install java-11-openjdk-devel unixODBC-devel libxslt-devel wxGTK3-devel gcc-c++ -y # 可选apache fop version=$(curl -s http://archive.apache.org/dist/xmlgraphics/fop/binaries/ | grep -Po \u0026#34;(?\u0026lt;=fop-).*?(?=-bin\\.zip)\u0026#34; | sort -n | tail -n 1) dnf install wget -y wget http://archive.apache.org/dist/xmlgraphics/fop/binaries/fop-\u0026#34;${version}\u0026#34;-bin.tar.gz tar -xf fop-\u0026#34;${version}\u0026#34;-bin.tar.gz -C /usr/local/ rm fop-\u0026#34;${version}\u0026#34;-bin.tar.gz ln -s /usr/local/fop-\u0026#34;${version}\u0026#34;/fop/fop /usr/local/bin/fop 2. 配置 OTP 24之前 (开启HIPE)\n./configure --enable-kernel-poll --enable-fips --enable-m64-build --enable-native-libs --enable-hipe OTP 24之后 (开启JIT)\n./configure --enable-kernel-poll --enable-fips --enable-m64-build --enable-jit 3. 编译 make -j \u0026#34;$(grep -c \u0026#34;processor\u0026#34; /proc/cpuinfo)\u0026#34; # 可选strip, 减少二进制体积 find ./bin/ -type f -exec file {} \\; | grep \u0026#34;not stripped\u0026#34; | awk -F \u0026#34;:\u0026#34; \u0026#39;{print $1}\u0026#39; | xargs -n 1 strip # 可选替换软链接绝对路径为相对路径 sed -i \u0026#34;s/\\\u0026#34;s;%FINAL_ROOTDIR%;\\$TARGET_ERL_ROOT;\\\u0026#34;/\\\u0026#34;s;%FINAL_ROOTDIR%;\\\\\\\\\\$(dirname \\\\\\\\\\$(dirname \\\\\\\\\\$(readlink -f \\\\\\\\\\$0)));\\\u0026#34;/\u0026#34; ./erts/etc/common/Install 4. 安装 make install ","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/compile-otp/","summy":"环境为RHEL/CentOS/RockyLinux 8 1. 安装编译依赖 # 基础curses/ssl dnf install gcc make ncurses-devel openssl-devel -y # 可选hipe依赖 dnf install llvm autoconf m4 -y # 启用epel仓库 dnf install epel-release -y # 可选jdk/odbc/wxWidge","tags":null,"title":"编译Erlang虚拟机"},{"categories":["erlang"],"contents":"\n1. 下载OTP源码 git clone git@github.com:erlang/otp.git \u0026amp;\u0026amp; cd otp 2. 配置 ./configure --enable-kernel-poll --enable-fips --enable-m64-build --with-dynamic-trace=systemtap 3. 以调试模式编译 make -j \u0026#34;$(grep -c \u0026#34;processor\u0026#34; /proc/cpuinfo)\u0026#34; TYPE=debug FLAVOR=smp 4. 安装VSCode插件 安装C/C++插件\n安装Makefile插件\n安装Remote - SSH插件(远程需要)\n5. 在OTP根目录建立.vscode文件夹 调试配置文件launch.json { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;beam.smp\u0026#34;, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceRoot}/bin/x86_64-pc-linux-gnu/beam.debug.smp\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;--\u0026#34;, \u0026#34;-root\u0026#34;, \u0026#34;${workspaceRoot}\u0026#34;, \u0026#34;-progname\u0026#34;, \u0026#34;${workspaceRoot}/bin/cerl\u0026#34;, \u0026#34;-debug\u0026#34;, \u0026#34;--\u0026#34;, \u0026#34;-home\u0026#34;, \u0026#34;${HOME}\u0026#34;, \u0026#34;--\u0026#34;, \u0026#34;-name\u0026#34;, \u0026#34;debug@127.0.0.1\u0026#34;, \u0026#34;-setcookie\u0026#34;, \u0026#34;erlang\u0026#34;], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34;, \u0026#34;environment\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;BINDIR\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;${workspaceRoot}/bin/x86_64-pc-linux-gnu\u0026#34; }], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;MIMode\u0026#34;: \u0026#34;gdb\u0026#34;, \u0026#34;setupCommands\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;enable etp commands\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;source ${workspaceRoot}/erts/etc/unix/etp-commands\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true }, { \u0026#34;description\u0026#34;: \u0026#34;enable pretty print\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-enable-pretty-printing\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true } ] } ] } 任务配置文件tasks.json { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;make\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;TYPE=debug\u0026#34;, \u0026#34;FLAVOR=smp\u0026#34;] } ] } 6. 按下F5进行调试 在你需要调试的地方打上断点 在终端输入你要调试的命令 在调试控制台输入 -exec source 你的OTP绝对路径/erts/etc/unix/etp-commands 启用etp命令\n在调试控制台使用etp命令打印变量 -exec etp 参数 ","date":"2020.03.04","permalink":"https://qcute.github.io/posts/erlang/debug-otp-with-vscode/","summy":"1. 下载OTP源码 git clone git@github.com:erlang/otp.git \u0026amp;\u0026amp; cd otp 2. 配置 ./configure --enable-kernel-poll --enable-fips --enable-m64-build --with-dynamic-trace=systemtap 3. 以调试模式编译 make -j \u0026#34;$(grep -c \u0026#34;processor\u0026#34; /proc/cpuinfo)\u0026#34; TYPE=debug FLAVOR=smp 4. 安装VSCode插件 安装C/C++插件 安装Makefile插件 安装Remote - SSH插件(远程需要) 5. 在OTP根目录建立","tags":null,"title":"使用VSCode调试Erlang虚拟机"},{"categories":["android"],"contents":"有一次在用KWGT选择文件夹的时候, 突然闪退了, 记得以前是没有问题的\n于是使用ADB查看日志\nadb logcat *:E 看到了错误日志如下\nNo activity found to handle intent android.intent.action.OPEN_DOCUMENT\nNo activity found to handle intent android.intent.action.OPEN_DOCUMENT_TREE\n奇怪了个怪, 按道理像文件管理器等应该会响应这个或者这类Intent吧\n然后查看Intent Filters, 看下有哪些Activity响应这个Intent\nadb shell dumpsys package r 发现了com.android.documentsui这个包有响应\n原来是我之前禁用那些无用的应用或者组件时把它禁用掉了\n问题解决~\n","date":"2020.03.03","permalink":"https://qcute.github.io/posts/android/android-intent-filter/","summy":"有一次在用KWGT选择文件夹的时候, 突然闪退了, 记得以前是没有问题的 于是使用ADB查看日志 adb logcat *:E 看到了错误日志如下 No activity found to handle intent android.intent.action.OPEN_DOCUMENT No activity found to handle intent android.intent.action.OPEN_DOCUMENT_TREE 奇怪了个怪, 按道理像文件管理器等应该会响应这个或者这类In","tags":null,"title":"Android Intent Filter问题"},{"categories":["android"],"contents":"由于在Android 7 (SDK 24) 及以后 Context.MODE_WORLD_READABLE 被废弃\n导致Xposed XSharedPreference不可用\n使用RemotePreferences, 但是需要Context\n使用Context.createDeviceProtectedStorageContext()\n把文件储存到/data/user_de/0/包名/shared_prefs/名称.xml, 然后再修复权限\n@SuppressWarnings(\u0026#34;ConstantConditions\u0026#34;) public static String getSharedPrefsPath() { if (prefsPathCurrent == null) try { Field fFile = prefs.getClass().getDeclaredField(\u0026#34;mFile\u0026#34;); fFile.setAccessible(true); prefsPathCurrent = ((File) fFile.get(prefs)).getParentFile().getAbsolutePath(); return prefsPathCurrent; } catch (Throwable t) { return prefsPath; } else return prefsPathCurrent; } @SuppressWarnings(\u0026#34;ConstantConditions\u0026#34;) public static String getSharedPrefsFile() { if (prefsFileCurrent == null) try { Field fFile = prefs.getClass().getDeclaredField(\u0026#34;mFile\u0026#34;); fFile.setAccessible(true); prefsFileCurrent = ((File) fFile.get(prefs)).getAbsolutePath(); return prefsFileCurrent; } catch (Throwable t) { return prefsFile; } else return prefsFileCurrent; } 摘自 CustoMIUIzerMod @SuppressLint({\u0026#34;SetWorldReadable\u0026#34;, \u0026#34;SetWorldWritable\u0026#34;}) public static void fixPermissionsAsync(Context context) { AsyncTask.execute(() -\u0026gt; { try { Thread.sleep(500); } catch (Throwable ignore) { } File pkgFolder = context.getDataDir(); if (pkgFolder.exists()) { pkgFolder.setExecutable(true, false); pkgFolder.setReadable(true, false); pkgFolder.setWritable(true, false); } File sharedPrefsFolder = new File(Helpers.getSharedPrefsPath()); if (sharedPrefsFolder.exists()) { sharedPrefsFolder.setExecutable(true, false); sharedPrefsFolder.setReadable(true, false); sharedPrefsFolder.setWritable(true, false); } File sharedPrefsFile = new File(Helpers.getSharedPrefsFile()); if (sharedPrefsFile.exists()) { sharedPrefsFile.setReadable(true, false); sharedPrefsFile.setExecutable(true, false); sharedPrefsFile.setWritable(true, false); } }); } 摘自 CustoMIUIzerMod\n但是此方法在 Android 9 (SDK 28) 及以上的部分机型, 会因为Selinux的限制导致出现部分情况异常. 如果运行在LSPosed或者EdXposed下, 可直接使用XSharedPreferences 要求Android 9 (SDK 28)及以上 要求XposedApi xposedminversion 93及以上 会有兼容性问题, 例如, 不一定能在在太极等框架上运行 在AndroidManifest.xml中设置 \u0026lt;meta-data android:name=\u0026#34;xposedminversion\u0026#34; android:value=\u0026#34;93\u0026#34; /\u0026gt; \u0026lt;meta-data android:name=\u0026#34;xposedsharedprefs\u0026#34; android:value=\u0026#34;true\u0026#34; /\u0026gt; 参考 LSPosed： New XSharedPreferences EdXposed： New XSharedPreferences\n其他参考资料\nXSharedPreference \u0026amp; SharedPreference - XPosed模块中的preference使用 Xposed\u0026ndash;Android N 以上 XSharedPreferences\n","date":"2020.03.03","permalink":"https://qcute.github.io/posts/android/xposed-shared-preferences/","summy":"由于在Android 7 (SDK 24) 及以后 Context.MODE_WORLD_READABLE 被废弃 导致Xposed XSharedPreference不可用 使用RemotePreferences, 但是需要Context 使用Context.createDevic","tags":null,"title":"Xposed XSharedPreferences在安卓N以后及解决方案"},{"categories":null,"contents":" 最初在CSDN\n迁移到简书\n然后到掘金\n最后用Github\n懂一点Erlang\n懂一点PHP\n懂一点Rust\n懂一点MySQL\n懂一点Bash\n懂一点Git\n","date":"2020.01.01","permalink":"https://qcute.github.io/about/","summy":"最初在CSDN 迁移到简书 然后到掘金 最后用Github 懂一点Erlang 懂一点PHP 懂一点Rust 懂一点MySQL 懂一点Bash 懂一点Git","tags":null,"title":"关于"},{"categories":null,"contents":"","date":"2020.01.01","permalink":"https://qcute.github.io/search/","summy":"","tags":null,"title":"搜索"}]