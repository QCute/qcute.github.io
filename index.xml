<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>轻作</title><link>https://qcute.github.io/</link><description>Recent content on 轻作</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 08 Mar 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://qcute.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Android Intent Filter问题</title><link>https://qcute.github.io/posts/android/android-intent-filter/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/android/android-intent-filter/</guid><description>有一次在用KWGT选择文件夹的时候, 突然闪退了, 记得以前是没有问题的 于是使用ADB查看日志 adb logcat *:E 看到了错误日志如下 No activity found to handle intent android.intent.action.OPEN_DOCUMENT No activity found to handle intent android.intent.action.OPEN_DOCUMENT_TREE 奇怪了个怪, 按道理像文件管理器等应该会响应这个或者这类In</description></item><item><title>Erlang ETS内部数据结构</title><link>https://qcute.github.io/posts/erlang/beam-ets/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-ets/</guid><description>1. set/bag/duplicate_bag使用的是哈希表 IS_HASH_TABLE 2. ordered_set使用的是AVL树 IS_TREE_TABLE 为了提升并发写性能, 在OTP22之后引入了CAS(contention adapting search)树 IS_CATREE_TABLE 参考Er</description></item><item><title>Erlang更新Record的优化</title><link>https://qcute.github.io/posts/erlang/beam-set-tuple-element/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-set-tuple-element/</guid><description>Record的更新使用的是erlang:setelement/3, 在更新多个字段的时候很浪费性能以及内存 后来引入了一个破坏性的优化指令: set_tuple_element -record(record, {a, b, c, d, e, f}). update(R) -&amp;gt; R#record{a = 1, b = 2}. {function, update, 1, 8}. {label,7}. {line,[{location,&amp;#34;test.erl&amp;#34;,3}]}. {func_info,{atom,user_default},{atom,update},1}. {label,8}. {test,is_tagged_tuple,{f,9},[{x,0},7,{atom,record}]}. {allocate,0,1}. {move,{x,0},{x,1}}. {move,{integer,2},{x,2}}. {move,{integer,3},{x,0}}. {line,[{location,&amp;#34;test.erl&amp;#34;,4}]}. {call_ext,3,{extfunc,erlang,setelement,3}}. {set_tuple_element,{integer,1},{x,0},1}.</description></item><item><title>Erlang进程表</title><link>https://qcute.github.io/posts/erlang/beam-process-table/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-process-table/</guid><description>以前以为进程表是用B树之类的存储, 后来才发现是用索引表 参考Erlang内部文档 进程和端口表 代码 ErtsPTab 学习了</description></item><item><title>编译Erlang虚拟机</title><link>https://qcute.github.io/posts/erlang/compile-otp/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/compile-otp/</guid><description>环境为RHEL/CentOS/RockyLinux 8 1. 安装编译依赖 # 基础curses/ssl dnf install gcc make ncurses-devel openssl-devel -y # 可选hipe依赖 dnf install llvm autoconf m4 -y # 启用epel仓库 dnf install epel-release -y # 可选jdk/odbc/wxWidge</description></item><item><title>使用VSCode调试Erlang虚拟机</title><link>https://qcute.github.io/posts/erlang/debug-otp-with-vscode/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/debug-otp-with-vscode/</guid><description>1. 下载OTP源码 git clone git@github.com:erlang/otp.git &amp;amp;&amp;amp; cd otp 2. 配置 ./configure --enable-kernel-poll --enable-fips --enable-m64-build --with-dynamic-trace=systemtap 3. 以调试模式编译 make -j &amp;#34;$(grep -c &amp;#34;processor&amp;#34; /proc/cpuinfo)&amp;#34; TYPE=debug FLAVOR=smp 4. 安装VSCode插件 安装C/C++插件 安装Makefile插件 安装Remote - SSH插件(远程需要) 5. 在OTP根目录建立</description></item><item><title>Git工作流</title><link>https://qcute.github.io/posts/git/git-work-flow/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/git/git-work-flow/</guid><description>本地开发流程 克隆仓库(git clone git@xxx:xxx.git) 创建并切换到xxx_dev分支(git checkout -b xxx_dev或者git switch -c xxx_dev) 开发 开发完成(git add/stage xxx) 提交(git commit -m &amp;ldquo;xxx&amp;rdquo;) 切换到master分支(git checkout master或者git</description></item><item><title>记一次bash的while循环中使用escript的问题</title><link>https://qcute.github.io/posts/shell/while-escript/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/while-escript/</guid><description>问题 在一次写脚本时，偶然发现了当Escript在Bash的while中使用时，循环里明明有很多次，但是Escript却只执行了一次的问题。 Escript执行脚本test.erl时，启动命令如下 test.erl -B -- -root</description></item><item><title>使用ResizeObserver监听元素大小变化</title><link>https://qcute.github.io/posts/js/resize-observer/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/js/resize-observer/</guid><description>在前端页面中，由于div元素没有相应onresize事件，当ECharts图形在容器div发生变化时，没有像浏览器窗口发生变化的时候能够自适应调整大小。 在窗口变化时，有效 // 正常 window.onresize = () =&amp;gt; chart.resize(); 在div容器变</description></item><item><title>MySQL的row_id</title><link>https://qcute.github.io/posts/mysql/mysql-row-id/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/mysql/mysql-row-id/</guid><description>MySQL的row_id在: 非联合主键，非空数字类型第一个非联合唯一索引</description></item><item><title>PHP JIT Core Dump问题</title><link>https://qcute.github.io/posts/php/php-jit-core-dump/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/php/php-jit-core-dump/</guid><description>记一次Laravel Octane(Swoole)在PHP8开启jit造成的core dump的问题 原jit配置 opcache.jit=1255 改成 opcache.jit=1205 即可</description></item><item><title>Service Unit User问题</title><link>https://qcute.github.io/posts/shell/service-unit-user/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/service-unit-user/</guid><description>今天发现php的getenv函数返回false getenv(&amp;#39;HOME&amp;#39;) 由于是系统是运行在system daemon下的, 查看了service unit, 里面并无指定具体的user 所以, 在Service里面添加User [Service] # specific user User=root 函数就可</description></item><item><title>服务端简单的框架图</title><link>https://qcute.github.io/posts/misc/server/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/server/</guid><description>服务器管理器负责逻辑服务器负载均衡和断线重连服务 客户端请求服务器管理器获取逻辑服务器地址 客户端使用公共服务可使用逻辑服务代理转发请求也可直接连接到公共服务 逻辑和公共服务启动时加入到节点管理器 数据库使用</description></item><item><title>获取Windows Store App下载地址</title><link>https://qcute.github.io/posts/misc/fetch-windows-store-app-link/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/fetch-windows-store-app-link/</guid><description>1. 在商店打开App页面 2. 找到分享按钮, 复制链接 3. 打开解析网站, 填入地址获取 4. 选择后缀为.appxbundle或者.appx的下载安装即可 解析地址https://store.rg-adguard.net</description></item><item><title>某实时公交API</title><link>https://qcute.github.io/posts/misc/bus-coming/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/bus-coming/</guid><description>API &amp;lt;?php class BusComing { /** Construct * @date 2022/03/20 * * @param string $userId * @param string $h5Id */ public function __construct(string $userId = &amp;#39;&amp;#39;, string $h5Id = &amp;#39;&amp;#39;) { $this-&amp;gt;userId = $userId; // the h5Id default userId $this-&amp;gt;h5Id = empty($h5Id) ? $userId : $h5Id; // user agent $this-&amp;gt;userAgent = &amp;#39;Mozilla/5.0 (Linux; Android 10; MI 6 Build/PKQ1.190118.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.0000.00 XWEB/3193 MMWEBSDK/20220202 Mobile Safari/537.36 MMWEBID/5374 MicroMessenger/8.0.20.2100(0x28001437) Process/appbrand1 WeChat/arm64 Weixin NetType/WIFI Language/zh_CN ABI/arm64 MiniProgramEnv/android&amp;#39;; } /** Set user agent * * @param string $userAgent */ public function setUserAgent(string $userAgent = &amp;#39;&amp;#39;) { $this-&amp;gt;userAgent = $userAgent; }</description></item><item><title>求职网站发布日期</title><link>https://qcute.github.io/posts/misc/job-publish-date/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/job-publish-date/</guid><description>现在招聘网站几乎都不展示职位的原始发布日期，很多发布了好几个月甚至是好几年的职位，放着用来吸引简历，极大的浪费了求职者的时间、精力和感情。 个人推荐BOSS直聘，无效职位相对较少，主动询问大多数有回复，</description></item><item><title>使用RPM仓库安装Prometheus</title><link>https://qcute.github.io/posts/shell/prometheus/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/prometheus/</guid><description>1. 安装prometheus/grafana/alertmanager # rpm repo # https://github.com/lest/prometheus-rpm cat &amp;gt; /etc/yum.repos.d/prometheus.repo &amp;lt;&amp;lt; EOF [prometheus] name=prometheus baseurl=https://packagecloud.io/prometheus-rpm/release/el/\$releasever/\$basearch repo_gpgcheck=1 enabled=1 gpgkey=https://packagecloud.io/prometheus-rpm/release/gpgkey https://raw.githubusercontent.com/lest/prometheus-rpm/master/RPM-GPG-KEY-prometheus-rpm gpgcheck=1 metadata_expire=300 EOF # update cache dnf makecache # grafana dnf install grafana -y systemctl start grafana # prometheus dnf install prometheus -y # exporter cat &amp;gt;&amp;gt; /etc/prometheus/prometheus.yml &amp;lt;&amp;lt; EOF - job_name: &amp;#34;node_exporter&amp;#34; static_configs: - targets: [&amp;#34;localhost:9100&amp;#34;] - job_name: &amp;#34;mysqld_exporter&amp;#34; static_configs: - targets: [&amp;#34;localhost:9104&amp;#34;] - job_name: &amp;#34;process_exporter&amp;#34; static_configs: -</description></item><item><title>推荐一个简约的hugo主题</title><link>https://qcute.github.io/posts/misc/hugo-theme/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/hugo-theme/</guid><description>在Google搜索hugo主题时, 在这里发现了一个简约的hugo主题 GitHub地址: zozo</description></item><item><title>一个比较快的SourceForge镜像站点</title><link>https://qcute.github.io/posts/misc/sourceforge-mirror/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/sourceforge-mirror/</guid><description>在一次下载ROM时偶然发现了一个速度比较快的镜像站点 liquidtelecom.dl.sourceforge.net 例如我下载时获取到的链接为 https://nchc.dl.sourceforge.net/project/&amp;hellip;.. 替换为 https://liquidtelecom.dl.sourceforge.net/project/&amp;hellip;.. 在50M电信带宽下, 平均下载速度可以达到2-3MB/s, 比其他站点几十KB/s快了不少 搭配多线程下载器, 例如基</description></item><item><title>一个简单的双向代理</title><link>https://qcute.github.io/posts/shell/proxy/</link><pubDate>Wed, 03 Mar 2021 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/proxy/</guid><description>1. 使用fifo和nc # client -&amp;gt; proxy:8974 -&amp;gt; server:8998 rm -f /tmp/fifo &amp;amp;&amp;amp; mkfifo /tmp/fifo &amp;amp;&amp;amp; nc -lkp 8974 &amp;lt; /tmp/fifo | nc -lkp 8998 &amp;gt; /tmp/fifo 2. 使用socat # client -&amp;gt; proxy:8974 -&amp;gt; server:8998 socat TCP4-LISTEN:8974,reuseaddr,fork TCP4:127.0.0.1:8998</description></item><item><title>关于</title><link>https://qcute.github.io/about/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/about/</guid><description>最初在CSDN 迁移到简书 然后到掘金 最后用Github 懂一点Erlang 懂一点PHP 懂一点Rust 懂一点MySQL 懂一点Bash 懂一点Git</description></item><item><title>搜索</title><link>https://qcute.github.io/search/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/search/</guid><description/></item></channel></rss>