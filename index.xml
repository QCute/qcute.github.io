<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>轻作</title><link>https://qcute.github.io/</link><description>Recent content on 轻作</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 10 Mar 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://qcute.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>KVM调整磁盘大小</title><link>https://qcute.github.io/posts/shell/kvm-resize/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/kvm-resize/</guid><description>一、创建新空间并复制旧数据 1.创建一块大小100G的空硬盘 qemu-img create -f qcow2 new.qcow2 100G 2.使用virt-resize进行对要扩大的分区进行扩容 virt-resize --expand /dev/sda1 old.qcow2 new.qcow2 virt-resize 在 guestfs-tools 或者 libguestfs-tools 上 二、直接扩大磁盘的大小 qemu-img resize old.qcow2 +10G 三、完成后使用 qemu-img 和 virt-df</description></item><item><title>RockyLinux调整分区大小</title><link>https://qcute.github.io/posts/shell/lv-resize/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/lv-resize/</guid><description>先备份整个home目录 卸载home目录 umount /home 移除home卷 lvremove /dev/mapper/rl-home 调整home卷大小 lvresize -L -10G /dev/mapper/rl-home 调整root卷大小 lvextend -L +10G /dev/mapper/rl-root 同步root卷大小 xfs_growfs /dev/mapper/rl-root 使用pvs查看卷 PV VG Fmt Attr PSize PFree /dev/sda3 rl lvm2 a-- &amp;lt;120.00g 0 将剩余空间分配给home卷</description></item><item><title>Service Unit User问题</title><link>https://qcute.github.io/posts/shell/service-unit-user/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/service-unit-user/</guid><description>今天发现php的getenv函数返回false getenv(&amp;#39;HOME&amp;#39;) 由于是系统是运行在system daemon下的, 查看了service unit, 里面并无指定具体的user 所以, 在Service里面添加User [Service] # specific user User=root 函数就可</description></item><item><title>sudoers免密码</title><link>https://qcute.github.io/posts/shell/sudoers/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/sudoers/</guid><description>修改 /etc/sudoers Debian/Ubuntu # User privilege specification root ALL=(ALL:ALL) ALL # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL # See sudoers(5) for more information on &amp;#34;@include&amp;#34; directives: user ALL=(ALL) NOPASSWD:ALL RedHat/CentOS/RockyLinux ## Allow root to run any commands anywhere root ALL=(ALL) ALL user ALL=(ALL) NOPASSWD:ALL ## Allows members of the &amp;#39;sys&amp;#39; group to run networking, software, ## service management apps and more. # %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS ## Allows people in group wheel to run all commands %wheel ALL=(ALL) ALL ## Same thing without a password %wheel</description></item><item><title>记一次bash的while循环中使用escript的问题</title><link>https://qcute.github.io/posts/shell/while-escript/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/while-escript/</guid><description>问题 在一次写脚本时，偶然发现了当Escript在Bash的while中使用时，循环里明明有很多次，但是Escript却只执行了一次的问题。 Escript执行脚本test.erl时，启动命令如下 test.erl -B -- -root</description></item><item><title>软链接路径tab补全斜杠号</title><link>https://qcute.github.io/posts/shell/input-rc/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/input-rc/</guid><description>修改 /etc/inputrc # Completed names which are symbolic links to # directories have a slash appended. set mark-symlinked-directories on 这样, 软链接就可以像普通目录一样补全斜杠/号了 不过, 删除的时候就要小心了, 不要带上后面的斜杠/号, 不然就会把源目录一起删掉</description></item><item><title>使用RPM仓库安装Prometheus</title><link>https://qcute.github.io/posts/shell/prometheus/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/prometheus/</guid><description>1. 安装prometheus/grafana/alertmanager # rpm repo # https://github.com/lest/prometheus-rpm cat &amp;gt; /etc/yum.repos.d/prometheus.repo &amp;lt;&amp;lt; EOF [prometheus] name=prometheus baseurl=https://packagecloud.io/prometheus-rpm/release/el/\$releasever/\$basearch repo_gpgcheck=1 enabled=1 gpgkey=https://packagecloud.io/prometheus-rpm/release/gpgkey https://raw.githubusercontent.com/lest/prometheus-rpm/master/RPM-GPG-KEY-prometheus-rpm gpgcheck=1 metadata_expire=300 EOF # update cache dnf makecache # grafana dnf install grafana -y systemctl start grafana # prometheus dnf install prometheus -y # exporter cat &amp;gt;&amp;gt; /etc/prometheus/prometheus.yml &amp;lt;&amp;lt; EOF - job_name: &amp;#34;node_exporter&amp;#34; static_configs: - targets: [&amp;#34;localhost:9100&amp;#34;] - job_name: &amp;#34;mysqld_exporter&amp;#34; static_configs: - targets: [&amp;#34;localhost:9104&amp;#34;] - job_name: &amp;#34;process_exporter&amp;#34; static_configs: -</description></item><item><title>一个简单的SSH Pass脚本</title><link>https://qcute.github.io/posts/shell/ssh-pass/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/ssh-pass/</guid><description>sshpass #!/usr/bin/env bash # sshpass - use command line password with ssh # inspire by https://github.com/huan/sshpass.sh # ref to https://www.exratione.com/2014/08/bash-script-ssh-automation-without-a-password-prompt/ # the origin sshpass pass passphrase by pipe, but Symfony Process pipe need --enable-sigchild # examples: # sshpass &amp;lt;ssh or key passphrase&amp;gt; ssh &amp;lt;ssh options&amp;gt; # sshpass &amp;lt;ssh or key passphrase&amp;gt; scp &amp;lt;scp options&amp;gt; # sshpass &amp;lt;ssh or key passphrase&amp;gt; rsync &amp;lt;rsync options&amp;gt; # sshpass &amp;lt;ssh or key passphrase&amp;gt; git &amp;lt;git options&amp;gt; # sshpass &amp;lt;ssh or key passphrase&amp;gt; svn &amp;lt;svn options&amp;gt; if [[ -n &amp;#34;${SSH_ASKPASS_PASSWORD}&amp;#34; ]];then cat &amp;lt;&amp;lt;&amp;lt; &amp;#34;${SSH_ASKPASS_PASSWORD}&amp;#34; else export SSH_ASKPASS=&amp;#34;$0&amp;#34; export SSH_ASKPASS_PASSWORD=&amp;#34;$1&amp;#34; export DISPLAY=:0 shift setsid &amp;#34;$@&amp;#34; &amp;lt;/dev/null</description></item><item><title>一个简单的双向代理</title><link>https://qcute.github.io/posts/shell/proxy/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/proxy/</guid><description>1. 使用fifo和nc # client -&amp;gt; proxy:8974 -&amp;gt; server:8998 rm -f /tmp/fifo &amp;amp;&amp;amp; mkfifo /tmp/fifo &amp;amp;&amp;amp; nc -lkp 8974 &amp;lt; /tmp/fifo | nc -lkp 8998 &amp;gt; /tmp/fifo 2. 使用socat # client -&amp;gt; proxy:8974 -&amp;gt; server:8998 socat TCP4-LISTEN:8974,reuseaddr,fork TCP4:127.0.0.1:8998</description></item><item><title>LaravelAdmin在Laravel8以上页面消息出现两次的问题</title><link>https://qcute.github.io/posts/php/laravel-admin-session-flash-to-now/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/php/laravel-admin-session-flash-to-now/</guid><description>解决LaravelAdmin在Laravel 8及以上, 使用页面消息出现两次的问题 把 session()-&amp;gt;flash($type, $message); 改成 session()-&amp;gt;now($type, $message); 即可 影响的函数 admin_success admin_error admin_warning admin_info admin_toastr 但是, 在数据表单, handle函数里面使用, 以上函数会失效 所以, 要么改, 然后在数据</description></item><item><title>PHP JIT Core Dump问题</title><link>https://qcute.github.io/posts/php/php-jit-core-dump/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/php/php-jit-core-dump/</guid><description>记一次Laravel Octane(Swoole)在PHP8开启jit造成的core dump的问题 原jit配置 opcache.jit=1255 改成 opcache.jit=1205 即可</description></item><item><title>Rust async/await初探</title><link>https://qcute.github.io/posts/rust/async-await/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/rust/async-await/</guid><description>1. async/await 异步函数 async fn f0() -&amp;gt; u32 { let f1 = f1().await; let f2 = f2().await; f1 + f2 } async fn f1() -&amp;gt; u32 { 1 } async fn f2() -&amp;gt; u32 { 2 } 生成的HIR Playground左上角点HIR async fn f0() -&amp;gt; /*impl Trait*/ #[lang = &amp;#34;from_generator&amp;#34;](move |mut _task_context| {{ let _t = { let f1 = match #[lang = &amp;#34;into_future&amp;#34;](f1()) { mut __awaitee =&amp;gt; loop { match unsafe { #[lang = &amp;#34;poll&amp;#34;](#[lang = &amp;#34;new_unchecked&amp;#34;](&amp;amp;mut</description></item><item><title>Symfony Process组件交互式进程问题</title><link>https://qcute.github.io/posts/php/symfony-process/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/php/symfony-process/</guid><description>Symfony Process组件使用SSH交互的问题 打开PTY模式即可 $env = [&amp;#39;PATH&amp;#39; =&amp;gt; getenv(&amp;#39;PATH&amp;#39;), &amp;#39;SSH_AUTH_SOCK&amp;#39; =&amp;gt; getenv(&amp;#39;SSH_AUTH_SOCK&amp;#39;)] $process = new Process([&amp;#39;ssh&amp;#39;, &amp;#39;username@host&amp;#39;, &amp;#39;echo 1&amp;#39;], null, $env); // turning on PTY support $process-&amp;gt;setPty(true); $process-&amp;gt;run(); echo $process-&amp;gt;getOutput(); 参考 Controlling an interactive process</description></item><item><title>MySQL的row_id</title><link>https://qcute.github.io/posts/mysql/mysql-row-id/</link><pubDate>Sun, 08 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/mysql/mysql-row-id/</guid><description>MySQL的row_id在: 非联合主键，非空数字类型第一个非联合唯一索引</description></item><item><title>acme.sh手动安装</title><link>https://qcute.github.io/posts/misc/acme/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/acme/</guid><description>官方自动安装脚本是使用&amp;ndash;install-online模式，在网络通畅的情况下是很不错的，但是国内嘛&amp;hellip; 1. 克隆仓库(或直接下载解压) git clone --depth=1 https://github.com/acmesh-official/acme.sh &amp;amp;&amp;amp; cd acme.sh # 国内使用Gitee镜像 git clone --depth=1 https://gitee.com/neilpang/acme.sh</description></item><item><title>Git/SVN禁止SSH登录shell并输出提示</title><link>https://qcute.github.io/posts/misc/git-svn-ssh-no-login/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/git-svn-ssh-no-login/</guid><description>新建git-shell-commands/svn-shell-commands目录 # git mkdir -p git-shell-commands # svn mkdir -p svn-shell-commands 创建no-interactive-login文件 # git cat &amp;gt; git-shell-commands/no-interactive-login &amp;lt;&amp;lt; EOF #!/bin/sh printf &amp;#39;%s\n&amp;#39; &amp;#34;Hi $USER! You&amp;#39;ve successfully authenticated, but I does not provide interactive shell access.&amp;#34; exit 128</description></item><item><title>redash安装报错问题修复</title><link>https://qcute.github.io/posts/misc/redash-install/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/redash-install/</guid><description>执行官方安装脚本Setup, 出现以下报错 Traceback (most recent call last): File &amp;#34;/app/manage.py&amp;#34;, line 9, in &amp;lt;module&amp;gt; manager() File &amp;#34;/usr/local/lib/python2.7/site-packages/click/core.py&amp;#34;, line 716, in __call__ return self.main(*args, **kwargs) File &amp;#34;/usr/local/lib/python2.7/site-packages/flask/cli.py&amp;#34;, line 380, in main return AppGroup.main(self, *args, **kwargs) File &amp;#34;/usr/local/lib/python2.7/site-packages/click/core.py&amp;#34;, line 696, in main rv = self.invoke(ctx) File &amp;#34;/usr/local/lib/python2.7/site-packages/click/core.py&amp;#34;, line 1060, in invoke return _process_result(sub_ctx.command.invoke(sub_ctx)) File &amp;#34;/usr/local/lib/python2.7/site-packages/click/core.py&amp;#34;, line 1060, in invoke return _process_result(sub_ctx.command.invoke(sub_ctx)) File &amp;#34;/usr/local/lib/python2.7/site-packages/click/core.py&amp;#34;, line 889, in invoke return ctx.invoke(self.callback, **ctx.params) File &amp;#34;/usr/local/lib/python2.7/site-packages/click/core.py&amp;#34;, line 534, in invoke return callback(*args, **kwargs) File &amp;#34;/usr/local/lib/python2.7/site-packages/click/decorators.py&amp;#34;, line 17, in new_func</description></item><item><title>SVN使用SSH</title><link>https://qcute.github.io/posts/misc/svn-ssh/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/svn-ssh/</guid><description>SSH配置方面和通常用Git一样，密码或者Key。 当SVN使用SSH时，SVN用户名用的就是SSH登录的用户名，所以配置就很简单明了。 仓库认证配置 conf/authz [/] ... # 本机用户名 = 权限 username = rw ... 仓库密码配置 conf/passwd [users] ... # 为</description></item><item><title>服务端简单的框架图</title><link>https://qcute.github.io/posts/misc/server/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/server/</guid><description>服务器管理器负责逻辑服务器负载均衡和断线重连服务 客户端请求服务器管理器获取逻辑服务器地址 客户端使用公共服务可使用逻辑服务代理转发请求也可直接连接到公共服务 逻辑和公共服务启动时加入到节点管理器 数据库使用</description></item><item><title>获取Windows Store App下载地址</title><link>https://qcute.github.io/posts/misc/fetch-windows-store-app-link/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/fetch-windows-store-app-link/</guid><description>1. 在商店打开App页面 2. 找到分享按钮, 复制链接 3. 打开解析网站, 填入地址获取 4. 选择后缀为.appxbundle或者.appx的下载安装即可 解析地址https://store.rg-adguard.net</description></item><item><title>某实时公交API</title><link>https://qcute.github.io/posts/misc/bus-coming/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/bus-coming/</guid><description>API &amp;lt;?php class BusComing { /** Construct * @date 2022/03/20 * * @param string $userId * @param string $h5Id */ public function __construct(string $userId = &amp;#39;&amp;#39;, string $h5Id = &amp;#39;&amp;#39;) { $this-&amp;gt;userId = $userId; // the h5Id default userId $this-&amp;gt;h5Id = empty($h5Id) ? $userId : $h5Id; // user agent $this-&amp;gt;userAgent = &amp;#39;Mozilla/5.0 (Linux; Android 10; MI 6 Build/PKQ1.190118.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.0000.00 XWEB/3193 MMWEBSDK/20220202 Mobile Safari/537.36 MMWEBID/5374 MicroMessenger/8.0.20.2100(0x28001437) Process/appbrand1 WeChat/arm64 Weixin NetType/WIFI Language/zh_CN ABI/arm64 MiniProgramEnv/android&amp;#39;; } /** Set user agent * * @param string $userAgent */ public function setUserAgent(string $userAgent = &amp;#39;&amp;#39;) { $this-&amp;gt;userAgent = $userAgent; }</description></item><item><title>求职网站发布日期</title><link>https://qcute.github.io/posts/misc/job-publish-date/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/job-publish-date/</guid><description>现在招聘网站几乎都不展示职位的原始发布日期，很多发布了好几个月甚至是好几年的职位，放着用来吸引简历，极大的浪费了求职者的时间、精力和感情。 个人推荐BOSS直聘，无效职位相对较少，主动询问大多数有回复，</description></item><item><title>推荐一个简约的hugo主题</title><link>https://qcute.github.io/posts/misc/hugo-theme/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/hugo-theme/</guid><description>在Google搜索hugo主题时, 在这里发现了一个简约的hugo主题 GitHub地址: zozo</description></item><item><title>一个比较快的SourceForge镜像站点</title><link>https://qcute.github.io/posts/misc/sourceforge-mirror/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/sourceforge-mirror/</guid><description>在一次下载ROM时偶然发现了一个速度比较快的镜像站点 liquidtelecom.dl.sourceforge.net 例如我下载时获取到的链接为 https://nchc.dl.sourceforge.net/project/&amp;hellip;.. 替换为 https://liquidtelecom.dl.sourceforge.net/project/&amp;hellip;.. 在50M电信带宽下, 平均下载速度可以达到2-3MB/s, 比其他站点几十KB/s快了不少 搭配多线程下载器, 例如基</description></item><item><title>Clang/LLVM编译流程</title><link>https://qcute.github.io/posts/llvm/clang-llvm-flow/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/llvm/clang-llvm-flow/</guid><description>1 .c(源文件) -&amp;gt; .i(预处理文件) clang -E -c test.c -o test.i 1.1 .c(源文件) -&amp;gt; .bc(LLVM IR文件(二进制形式)) clang -emit-llvm test.c -c -o test.bc 1.2 .c(源文件) -&amp;gt; .ll(LLVM IR文件(文本形式)) clang -emit-llvm test.c -S -o test.ll 2 .i(预处理文件) -&amp;gt; .bc(LLVM IR文件(二进制形</description></item><item><title>JS简单随机密码</title><link>https://qcute.github.io/posts/js/random-password/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/js/random-password/</guid><description>function randomPassword(length) { const charArray = [ // 数字 &amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;6&amp;#34;, &amp;#34;7&amp;#34;, &amp;#34;8&amp;#34;, &amp;#34;9&amp;#34;, // 大写字母 &amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;E&amp;#34;, &amp;#34;F&amp;#34;, &amp;#34;G&amp;#34;, &amp;#34;H&amp;#34;, &amp;#34;I&amp;#34;, &amp;#34;J&amp;#34;, &amp;#34;K&amp;#34;, &amp;#34;L&amp;#34;, &amp;#34;M&amp;#34;, &amp;#34;N&amp;#34;, &amp;#34;O&amp;#34;, &amp;#34;P&amp;#34;, &amp;#34;Q&amp;#34;, &amp;#34;R&amp;#34;, &amp;#34;S&amp;#34;, &amp;#34;T&amp;#34;, &amp;#34;U&amp;#34;, &amp;#34;V&amp;#34;, &amp;#34;W&amp;#34;, &amp;#34;X&amp;#34;, &amp;#34;Y&amp;#34;, &amp;#34;Z&amp;#34;, // 小写字母 &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;, &amp;#34;f&amp;#34;, &amp;#34;g&amp;#34;, &amp;#34;h&amp;#34;, &amp;#34;i&amp;#34;, &amp;#34;j&amp;#34;, &amp;#34;k&amp;#34;, &amp;#34;l&amp;#34;, &amp;#34;m&amp;#34;, &amp;#34;n&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34;p&amp;#34;, &amp;#34;q&amp;#34;, &amp;#34;r&amp;#34;, &amp;#34;s&amp;#34;, &amp;#34;t&amp;#34;, &amp;#34;u&amp;#34;, &amp;#34;v&amp;#34;, &amp;#34;w&amp;#34;, &amp;#34;x&amp;#34;, &amp;#34;y&amp;#34;, &amp;#34;z&amp;#34;, ]; return Array.from({length}, () =&amp;gt; charArray[Math.trunc(Math.random() * charArray.length)]).join(&amp;#34;&amp;#34;); }</description></item><item><title>UniApp(uViewUI)弹出层滚动穿透问题</title><link>https://qcute.github.io/posts/js/uni-app-popup-scroll-through/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/js/uni-app-popup-scroll-through/</guid><description>动态修改页面属性 在网上搜了下，说要设置page-meta样式 &amp;lt;page-meta :page-style=&amp;#34;{&amp;#39;overflow&amp;#39;: scroll ? &amp;#39;visible&amp;#39; : &amp;#39;hidden&amp;#39; }&amp;#34;&amp;gt; 如果每个有弹窗的页面都要额外再设置一个page-meta的话，这就很不方便了 我们看下uViewUI弹窗例子 &amp;lt;template&amp;gt; &amp;lt;view&amp;gt; &amp;lt;u-popup :show=&amp;#34;show&amp;#34; @close=&amp;#34;close&amp;#34; @open=&amp;#34;open&amp;#34; @touchmove.stop=&amp;#34;&amp;#34;&amp;gt; &amp;lt;scroll-view scroll-y</description></item><item><title>使用ResizeObserver监听元素大小变化</title><link>https://qcute.github.io/posts/js/resize-observer/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/js/resize-observer/</guid><description>在前端页面中，由于div元素没有相应onresize事件，当ECharts图形在容器div发生变化时，没有像浏览器窗口发生变化的时候能够自适应调整大小。 在窗口变化时，有效 // 正常 window.onresize = () =&amp;gt; chart.resize(); 在div容器变</description></item><item><title>Git工作流</title><link>https://qcute.github.io/posts/git/git-work-flow/</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/git/git-work-flow/</guid><description>本地开发流程 克隆仓库(git clone git@xxx:xxx.git) 创建并切换到xxx_dev分支(git checkout -b xxx_dev或者git switch -c xxx_dev) 开发 开发完成(git add/stage xxx) 提交(git commit -m &amp;ldquo;xxx&amp;rdquo;) 切换到master分支(git checkout master或者git</description></item><item><title>C#的一些'冷'知识</title><link>https://qcute.github.io/posts/cs/cs-encoding/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/cs/cs-encoding/</guid><description>所有源代码文件，默认编码为 UTF-8(with BOM) 源文件所有的string字面值，默认编码均为 Unicode (UTF-16) 使用不带BOM的UTF-8的源文件，编译时需要添加-codepage:65001选项，不然会出现奇怪的CS0103问题，而</description></item><item><title>Erlang ETS内部数据结构</title><link>https://qcute.github.io/posts/erlang/beam-ets/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-ets/</guid><description>1. set/bag/duplicate_bag使用的是哈希表 IS_HASH_TABLE 2. ordered_set使用的是AVL树 IS_TREE_TABLE 为了提升并发写性能, 在OTP22之后引入了CAS(contention adapting search)树 IS_CATREE_TABLE 参考Er</description></item><item><title>Erlang持久对象(Persistent Term)</title><link>https://qcute.github.io/posts/erlang/persistent-term/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/persistent-term/</guid><description>持久对象(Persistent Term)是OTP-21.3之后引入的, 它的get是非复制(Copy)的 persistent_term_get_1 lookup get_bucket 而ETS的get是复制(Copy)的 ets_lookup_2 db_get_hash build_term_list 在游戏服务器里面, 配置表通常会用ETS或者beam</description></item><item><title>Erlang更新Record的优化</title><link>https://qcute.github.io/posts/erlang/beam-set-tuple-element/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-set-tuple-element/</guid><description>Record的更新使用的是erlang:setelement/3, 在更新多个字段的时候很浪费性能以及内存 后来引入了一个破坏性的优化指令: set_tuple_element -record(record, {a, b, c, d, e, f}). update(R) -&amp;gt; R#record{a = 1, b = 2}. {function, update, 1, 8}. {label,7}. {line,[{location,&amp;#34;test.erl&amp;#34;,3}]}. {func_info,{atom,user_default},{atom,update},1}. {label,8}. {test,is_tagged_tuple,{f,9},[{x,0},7,{atom,record}]}. {allocate,0,1}. {move,{x,0},{x,1}}. {move,{integer,2},{x,2}}. {move,{integer,3},{x,0}}. {line,[{location,&amp;#34;test.erl&amp;#34;,4}]}. {call_ext,3,{extfunc,erlang,setelement,3}}. {set_tuple_element,{integer,1},{x,0},1}.</description></item><item><title>Erlang进程表</title><link>https://qcute.github.io/posts/erlang/beam-process-table/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-process-table/</guid><description>以前以为进程表是用B树之类的存储, 后来才发现是用索引表 参考Erlang内部文档 进程和端口表 代码 ErtsPTab 学习了</description></item><item><title>Erlang实现函数内的循环</title><link>https://qcute.github.io/posts/erlang/erlang-loop/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/erlang-loop/</guid><description>erlang语义上绑定的变量是不可变的, 函数内也没有for/while/loop等循环 但是, 函数式语言, 函数是第一等公民, 当然是可以通过命名高阶函数实现循环 -module(test). main(_) -&amp;gt; Sum = fun Loop(10, Sum) -&amp;gt; Sum; Loop(N, Sum) -&amp;gt; Loop(N + 1, Sum + N) end(1, 0), io:format(&amp;#34;loop:</description></item><item><title>Erlang异步的实现</title><link>https://qcute.github.io/posts/erlang/erlang-async/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/erlang-async/</guid><description>对于Bif 使用的是BIF_TRAP宏 #define ERTS_BIF_PREP_TRAP(Export, Proc, Arity) \ do { \ (Proc)-&amp;gt;i = (Export)-&amp;gt;addresses[erts_active_code_ix()]; \ (Proc)-&amp;gt;arity = (Arity); \ (Proc)-&amp;gt;freason = TRAP; \ } while(0); #define BIF_TRAP1(Trap_, p, A0) \ do { \ Eterm* reg = erts_proc_sched_data((p))-&amp;gt;registers-&amp;gt;x_reg_array.d; \ ERTS_BIF_PREP_TRAP((Trap_), (p), 1); \ reg[0] = (A0); \ return THE_NON_VALUE; \ } while(0) 可见, 保存当前PC, 寄存器数和失败原因还有调用参数 beam_hot.</description></item><item><title>编译Erlang虚拟机</title><link>https://qcute.github.io/posts/erlang/compile-otp/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/compile-otp/</guid><description>环境为RHEL/CentOS/RockyLinux 8 1. 安装编译依赖 # 基础curses/ssl dnf install gcc make ncurses-devel openssl-devel -y # 可选hipe依赖 dnf install llvm autoconf m4 -y # 启用epel仓库 dnf install epel-release -y # 可选jdk/odbc/wxWidge</description></item><item><title>使用VSCode调试Erlang虚拟机</title><link>https://qcute.github.io/posts/erlang/debug-otp-with-vscode/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/debug-otp-with-vscode/</guid><description>1. 下载OTP源码 git clone git@github.com:erlang/otp.git &amp;amp;&amp;amp; cd otp 2. 配置 ./configure --enable-kernel-poll --enable-fips --enable-m64-build --with-dynamic-trace=systemtap 3. 以调试模式编译 make -j &amp;#34;$(grep -c &amp;#34;processor&amp;#34; /proc/cpuinfo)&amp;#34; TYPE=debug FLAVOR=smp 4. 安装VSCode插件 安装C/C++插件 安装Makefile插件 安装Remote - SSH插件(远程需要) 5. 在OTP根目录建立</description></item><item><title>Android Intent Filter问题</title><link>https://qcute.github.io/posts/android/android-intent-filter/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/android/android-intent-filter/</guid><description>有一次在用KWGT选择文件夹的时候, 突然闪退了, 记得以前是没有问题的 于是使用ADB查看日志 adb logcat *:E 看到了错误日志如下 No activity found to handle intent android.intent.action.OPEN_DOCUMENT No activity found to handle intent android.intent.action.OPEN_DOCUMENT_TREE 奇怪了个怪, 按道理像文件管理器等应该会响应这个或者这类In</description></item><item><title>Xposed XSharedPreferences在安卓N以后及解决方案</title><link>https://qcute.github.io/posts/android/xposed-shared-preferences/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/android/xposed-shared-preferences/</guid><description>由于在Android 7 (SDK 24) 及以后 Context.MODE_WORLD_READABLE 被废弃 导致Xposed XSharedPreference不可用 使用RemotePreferences, 但是需要Context 使用Context.createDevic</description></item><item><title>关于</title><link>https://qcute.github.io/about/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/about/</guid><description>最初在CSDN 迁移到简书 然后到掘金 最后用Github 懂一点Erlang 懂一点PHP 懂一点Rust 懂一点MySQL 懂一点Bash 懂一点Git</description></item><item><title>搜索</title><link>https://qcute.github.io/search/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate><guid>https://qcute.github.io/search/</guid><description/></item></channel></rss>