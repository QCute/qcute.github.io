<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 轻作</title><link>https://qcute.github.io/posts/</link><description>Recent content in Posts on 轻作</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 08 Mar 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://qcute.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>使用VSCode调试Erlang虚拟机</title><link>https://qcute.github.io/posts/erlang/debug-otp-with-vscode/</link><pubDate>Tue, 08 Mar 2022 12:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/debug-otp-with-vscode/</guid><description>1. 下载OTP源码 git clone git@github.com:erlang/otp.git &amp;amp;&amp;amp; cd otp 2. 配置 ./configure --enable-kernel-poll --enable-fips --enable-m64-build --with-dynamic-trace=systemtap 3. 以调试模式编译 make -j &amp;#34;$(grep -c &amp;#34;processor&amp;#34; /proc/cpuinfo)&amp;#34; TYPE=debug FLAVOR=smp 4. 安装VSCode插件 安装C/C++插件 安装Makefile插件 安装Remote - SSH插件(远程需要) 5. 在OTP根目录建立</description></item><item><title>编译Erlang虚拟机</title><link>https://qcute.github.io/posts/erlang/compile-otp/</link><pubDate>Tue, 08 Mar 2022 12:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/compile-otp/</guid><description>环境为RHEL/CentOS/RockyLinux 8 1. 安装编译依赖 # 基础curses/ssl dnf install gcc make ncurses-devel openssl-devel -y # 可选hipe依赖 dnf install llvm autoconf m4 -y # 启用epel仓库 dnf install epel-release -y # 可选jdk/odbc/wxWidge</description></item><item><title>Erlang ETS内部数据结构</title><link>https://qcute.github.io/posts/erlang/beam-ets/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-ets/</guid><description>1. set/bag/duplicate_bag使用的是哈希表 IS_HASH_TABLE 2. ordered_set使用的是AVL树 IS_TREE_TABLE 为了提升并发写性能, 在OTP22之后引入了CAS(contention adapting search)树 IS_CATREE_TABLE 参考Er</description></item><item><title>Erlang更新Record的优化</title><link>https://qcute.github.io/posts/erlang/beam-set-tuple-element/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-set-tuple-element/</guid><description>Record的更新使用的是erlang:setelement/3, 在更新多个字段的时候很浪费性能以及内存 后来引入了一个破坏性的优化指令: set_tuple_element -record(record, {a, b, c, d, e, f}). update(R) -&amp;gt; R#record{a = 1, b = 2}. {function, update, 1, 8}. {label,7}. {line,[{location,&amp;#34;test.erl&amp;#34;,3}]}. {func_info,{atom,user_default},{atom,update},1}. {label,8}. {test,is_tagged_tuple,{f,9},[{x,0},7,{atom,record}]}. {allocate,0,1}. {move,{x,0},{x,1}}. {move,{integer,2},{x,2}}. {move,{integer,3},{x,0}}. {line,[{location,&amp;#34;test.erl&amp;#34;,4}]}. {call_ext,3,{extfunc,erlang,setelement,3}}. {set_tuple_element,{integer,1},{x,0},1}.</description></item><item><title>Erlang进程表</title><link>https://qcute.github.io/posts/erlang/beam-process-table/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/erlang/beam-process-table/</guid><description>以前以为进程表是用B树之类的存储, 后来才发现是用索引表 参考Erlang内部文档 进程和端口表 代码 ErtsPTab 学习了</description></item><item><title>Git工作流</title><link>https://qcute.github.io/posts/git/git-work-flow/</link><pubDate>Sat, 05 Mar 2022 12:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/git/git-work-flow/</guid><description>本地(dev) ↓ 远程(dev) ↓ 储藏变更(git stash) ↓ 拉取(git pull &amp;ndash;rebase(fetch &amp;amp; merge/rebase)) ↓ 弹出储藏(git stash pop) →→→ 无冲突 → CI/CD ↓ 有冲突 ↓ 使用他们(策划)的配置数据 git checkout &amp;ndash;ours . (use ours(push) configure data) 使用我们(开发)的配置数据 git checkout &amp;ndash;theirs . (use theirs(generated</description></item><item><title>MySQL的row_id</title><link>https://qcute.github.io/posts/mysql/mysql-row-id/</link><pubDate>Sat, 05 Mar 2022 12:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/mysql/mysql-row-id/</guid><description>MySQL的row_id在: 非联合主键，非空数字类型第一个非联合唯一索引</description></item><item><title>一个简单的双向代理</title><link>https://qcute.github.io/posts/shell/proxy/</link><pubDate>Sat, 05 Mar 2022 12:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/proxy/</guid><description>1. 使用fifo和nc # client -&amp;gt; proxy:8974 -&amp;gt; server:8998 rm -f /tmp/fifo &amp;amp;&amp;amp; mkfifo /tmp/fifo &amp;amp;&amp;amp; nc -lkp 8974 &amp;lt; /tmp/fifo | nc -lkp 8998 &amp;gt; /tmp/fifo 2. 使用socat # client -&amp;gt; proxy:8974 -&amp;gt; server:8998 socat TCP4-LISTEN:8974,reuseaddr,fork TCP4:127.0.0.1:8998</description></item><item><title>使用RPM仓库安装Prometheus</title><link>https://qcute.github.io/posts/shell/prometheus/</link><pubDate>Sat, 05 Mar 2022 12:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/shell/prometheus/</guid><description>1. 安装prometheus/grafana/alertmanager # rpm repo # https://github.com/lest/prometheus-rpm cat &amp;gt; /etc/yum.repos.d/prometheus.repo &amp;lt;&amp;lt; EOF [prometheus] name=prometheus baseurl=https://packagecloud.io/prometheus-rpm/release/el/\$releasever/\$basearch repo_gpgcheck=1 enabled=1 gpgkey=https://packagecloud.io/prometheus-rpm/release/gpgkey https://raw.githubusercontent.com/lest/prometheus-rpm/master/RPM-GPG-KEY-prometheus-rpm gpgcheck=1 metadata_expire=300 EOF # update cache dnf makecache # grafana dnf install grafana -y systemctl start grafana # prometheus dnf install prometheus -y # exporter cat &amp;gt;&amp;gt; /etc/prometheus/prometheus.yml &amp;lt;&amp;lt; EOF - job_name: &amp;#34;node_exporter&amp;#34; static_configs: - targets: [&amp;#34;localhost:9100&amp;#34;] - job_name: &amp;#34;mysqld_exporter&amp;#34; static_configs: - targets: [&amp;#34;localhost:9104&amp;#34;] - job_name: &amp;#34;process_exporter&amp;#34; static_configs: -</description></item><item><title>一个比较快的SourceForge镜像站点</title><link>https://qcute.github.io/posts/misc/sourceforge-mirror/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/sourceforge-mirror/</guid><description>在一次下载ROM时偶然发现了一个速度比较快的镜像站点 liquidtelecom.dl.sourceforge.net 例如我下载时获取到的链接为 https://nchc.dl.sourceforge.net/project/&amp;hellip;.. 替换为 https://liquidtelecom.dl.sourceforge.net/project/&amp;hellip;.. 在50M电信带宽下, 平均下载速度可以达到2-3MB/s, 比其他站点几十KB/s快了不少 搭配多线程下载器, 例如基</description></item><item><title>推荐一个简约的hugo主题</title><link>https://qcute.github.io/posts/misc/hugo-theme/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/hugo-theme/</guid><description>在Google搜索hugo主题时, 在这里发现了一个简约的hugo主题 GitHub地址: graphite</description></item><item><title>服务端简单的框架图</title><link>https://qcute.github.io/posts/misc/server/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/server/</guid><description>服务器管理器负责逻辑服务器负载均衡和断线重连服务 客户端请求服务器管理器获取逻辑服务器地址 客户端使用公共服务可使用逻辑服务代理转发请求也可直接连接到公共服务 逻辑和公共服务启动时加入到节点管理器 数据库使用</description></item><item><title>求职网站发布日期</title><link>https://qcute.github.io/posts/misc/job-publish-date/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/job-publish-date/</guid><description>现在招聘网站几乎都不展示职位的原始发布日期，很多发布了好几个月甚至是好几年的职位，放着用来吸引简历，极大的浪费了求职者的时间、精力和感情。 个人推荐BOSS直聘，无效职位相对较少，主动询问大多数有回复，</description></item><item><title>获取Windows Store App下载地址</title><link>https://qcute.github.io/posts/misc/fetch-windows-store-app-link/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0800</pubDate><guid>https://qcute.github.io/posts/misc/fetch-windows-store-app-link/</guid><description>1. 在商店打开App页面 2. 找到分享按钮, 复制链接 3. 打开解析网站, 填入地址获取 4. 选择后缀为.appxbundle或者.appx的下载安装即可 解析地址https://store.rg-adguard.net</description></item></channel></rss>